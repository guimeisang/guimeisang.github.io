<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>guimeisang的博客</title>
  <subtitle>和平认真，真诚待人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://guimeisang.github.io/"/>
  <updated>2017-08-11T09:43:05.000Z</updated>
  <id>https://guimeisang.github.io/</id>
  
  <author>
    <name>guimeisang</name>
    <email>792300489@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>require和import的理解</title>
    <link href="https://guimeisang.github.io/2017/08/11/require%E5%92%8Cimport%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://guimeisang.github.io/2017/08/11/require和import的理解/</id>
    <published>2017-08-11T09:39:12.000Z</published>
    <updated>2017-08-11T09:43:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文作者：guimeisang，未经同意，禁止转载</strong></p>
<blockquote>
<p>以时间为维度，分为ES6之前和ES6之后。其实为了实现javascript的工程化，才引出模块化这个概念，require，import就是为实现这个而生。</p>
</blockquote>
<h2 id="在ES6之前"><a href="#在ES6之前" class="headerlink" title="在ES6之前"></a>在ES6之前</h2><p>在ES6之前引入了模块的概念，主要是为了适应大型应用的。node的module遵守CommonJS规范。而在浏览器端，requirejs和seajs之类的工具包也出现了。所以说在node端，浏览器端。<code>require + module.exports</code>基本实现了所有模块化的编程。  </p>
<p>node的module遵循CommonJS规范，requirejs遵循AMD，seajs遵循CMD，虽然各有不同，但代码风格相似。 下面是模块导出端：   </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// demo1.js</span></div><div class="line"></div><div class="line"><span class="comment">// ---- node ----</span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    a : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">    b : <span class="string">'foo'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ----- 浏览器 AMD 和 CMD -----</span></div><div class="line"></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">    <span class="built_in">module</span>.exports = &#123;</div><div class="line">        a : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        b : <span class="string">'foo'</span></div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// ------ UMD ------</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;&#125;; <span class="comment">// return 的值就是导出的模块 </span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>可以看出来，为了代码风格相似，<strong>浏览器端的模块中要使用一个define函数来提供模块的闭包以外，其他代码可以完全一致。</strong> 下面是导入模块：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// demo2.js</span></div><div class="line"></div><div class="line"><span class="comment">// ---- node -----</span></div><div class="line"><span class="keyword">var</span> m = <span class="built_in">require</span>(<span class="string">'./demo1'</span>);</div><div class="line">m.a();</div><div class="line"></div><div class="line"><span class="comment">// ---- AMD or CMD ----</span></div><div class="line">defined(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> m = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div><div class="line">    m.a();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>node发布的时候，就天生具备module，node相当于促进了js世界里面的模块化编程。  </p>
<p>注意：exports是module.exports的“别名”，即exports是module.exports地址的引用。</p>
<h2 id="ES6发布之后"><a href="#ES6发布之后" class="headerlink" title="ES6发布之后"></a>ES6发布之后</h2><p>ES6没有把require写入标准，所以其还是一个普通的函数，ES6使用import指令引入模块或模块中的部分接口。而导出的话，ES6标准中，用export指令，也就是说，module.exports只是node，requirejs等模块化库中的自定义变量，而非ES标准接口。</p>
<h4 id="模块导出"><a href="#模块导出" class="headerlink" title="模块导出"></a>模块导出</h4><p>下面是导出模块的部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">export</span> &#123; name1, name2, ..., nameN &#125;;</div><div class="line"><span class="keyword">export</span> &#123; variable1 <span class="keyword">as</span> name1, variable2 <span class="keyword">as</span> name2, ..., nameN &#125;;</div><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> name1, name2, ..., nameN;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> expression;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">...</span>)</span>&#123;...&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> ...;</div><div class="line"><span class="keyword">export</span> &#123; name1, name2, ..., nameN &#125; <span class="keyword">from</span> ...;</div><div class="line"><span class="keyword">export</span> &#123; import1 <span class="keyword">as</span> name1, ..., nameN &#125; <span class="keyword">from</span> ...;</div></pre></td></tr></table></figure></p>
<p>ES6里面，直接把要导出的变量，函数，对象，类等前面加上一个export关键词，错误演示：  </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误演示</span></div><div class="line"><span class="keyword">export</span> <span class="number">1</span>; </div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">export</span> a;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">export</span> b;</div></pre></td></tr></table></figure>
<p>这种直接内容，而不是导出变量绝对是错误的，或者说导出表达式也是错误的。导出接口仅限两种：</p>
<ul>
<li>声明时导出；</li>
<li>以对象的形式导出（和解构联系起来）；</li>
</ul>
<p>如果要导出某个变量，可以如下导出：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">export &#123;a&#125;; // 解构，相当于&#123;a: a&#125;</div><div class="line">function b()&#123;&#125;;</div><div class="line">export &#123;b&#125;;</div></pre></td></tr></table></figure>
<p><strong>敲黑板，划重点：</strong> ES6最厉害的地方在于，可以在export变量之后，继续修改变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export cosnt a = 0;</div><div class="line">a = 1;</div><div class="line"></div><div class="line">// 在import之后，发现a的值为1，这个是CommonJS不能做到的。</div></pre></td></tr></table></figure>
<h4 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h4><blockquote>
<p>和node之前的require不一样，require只能把模块放到一个变量中，而在ES6中，拥有对象解构赋值的能力，所以直接就把引入的模块接口赋值给变量了。内在机理也不同，require需要执行整个模块，就是将整个模块放到内存中（也就是我们说的在运行时），如果只是用到里面一个方法，性能上就差很多，而import…from，则只需要在编译的时候将需要的接口方法加载，其他的方法在程序启动之后根本触及不到，所以被称为在编译时，性能上有很大的改善。  </p>
</blockquote>
<h5 id="as-关键词"><a href="#as-关键词" class="headerlink" title="as 关键词"></a>as 关键词</h5><p>简单来说就是一个别名。export和import都可以用。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// demo1.js</div><div class="line"></div><div class="line">var a = function() &#123;&#125;;  </div><div class="line">export &#123; a as fun &#125;</div><div class="line"></div><div class="line">// demo2.js</div><div class="line"></div><div class="line">import &#123; fun as a &#125; from &apos;./demo1&apos;;</div><div class="line">a();</div></pre></td></tr></table></figure>
<p>上面代码中，demo1.js中，以fun代替a这个函数，所以在外面的模块中只能识别到fun，识别不到a。而在demo2.js中，引入fun方法，但是我们用a去代替它。（这有个好处就是，比如demo3.js也导出一个fun的接口，这个时候这个别名就很有用。可以解决这种接口重名的问题）</p>
<h5 id="default-关键词"><a href="#default-关键词" class="headerlink" title="default 关键词"></a>default 关键词</h5><p>简单来说就是别名的语法糖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// demo1.js</div><div class="line"></div><div class="line">export default function() &#123;&#125;</div><div class="line">// 等效于</div><div class="line">function a() &#123;&#125;</div><div class="line">export &#123;a as default&#125;</div></pre></td></tr></table></figure>
<p>在导入的时候：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import a from &apos;./demo1&apos;;</div><div class="line">// 等效于</div><div class="line">import &#123;default as a&#125; from &apos;./d&apos;;</div></pre></td></tr></table></figure>
<h5 id="符号"><a href="#符号" class="headerlink" title="* 符号"></a>* 符号</h5><p>简单来说，*代表所有，看下面的两个例子：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import * as foo from &apos;_&apos;;</div></pre></td></tr></table></figure>
<p>意思是：将’_’模块中所有接口挂载在foo对象上，所以可以用underscore.each调用某个接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export * from &apos;_&apos;;</div><div class="line"></div><div class="line">// 等效于</div><div class="line">import * as all from &apos;_&apos;;</div><div class="line">export all;</div></pre></td></tr></table></figure>
<h2 id="怎么用require和import这两兄弟？"><a href="#怎么用require和import这两兄弟？" class="headerlink" title="怎么用require和import这两兄弟？"></a>怎么用require和import这两兄弟？</h2><p>总体感觉，既然ES6将import加入到标准了，这个时候一般还是乖乖的用import的吧。虽然说现在引擎还不能支持import，依然是用bable神器解析成reqiure，所以现在你会发现有些之前的CommonJS模块，依然可以用import引用。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// demo1.js</div><div class="line">module.exports = &#123;&#125;;</div><div class="line"></div><div class="line">// demo2.js</div><div class="line">import a from &apos;./demo1&apos;;</div></pre></td></tr></table></figure>
<p>这种混搭不是很好，但是可以用。</p>
<p>不过现在不是所有的环境都支持import，所以可以使用babel让node支持ES6，但是浏览器端，则毫无办法，可能暂时用require。但是很遗憾你ES6并不兼容require，所以到时候你必须要升级代码。   </p>
<p>import只能在文件开头使用，在import之前，你不能有其他的代码，这和其他语言是一样的。但是require则不同，它相当于node的一个定义在全局的函数，你可以在任意地方使用它，甚至使用变量表达式作为它的参数，这样有一个好处，就是可以在循环中加载模块。   </p>
<p>最后说一句，js引擎们很快就会实现ES6标准规定，如果时一个引擎标准都没办法实现，就会被淘汰，所以尽在去部署import，你未来可能改的代码越少。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文作者：guimeisang，未经同意，禁止转载&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以时间为维度，分为ES6之前和ES6之后。其实为了实现javascript的工程化，才引出模块化这个概念，require，import就是为实现这个
    
    </summary>
    
    
      <category term="ES6 require import 模块" scheme="https://guimeisang.github.io/tags/ES6-require-import-%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://guimeisang.github.io/2017/08/05/hello-world/"/>
    <id>https://guimeisang.github.io/2017/08/05/hello-world/</id>
    <published>2017-08-05T09:11:26.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>location和分环境开发</title>
    <link href="https://guimeisang.github.io/2017/05/19/location%E5%92%8C%E5%88%86%E7%8E%AF%E5%A2%83%E5%BC%80%E5%8F%91/"/>
    <id>https://guimeisang.github.io/2017/05/19/location和分环境开发/</id>
    <published>2017-05-19T09:29:34.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Location对象"><a href="#Location对象" class="headerlink" title="Location对象"></a>Location对象</h4><ul>
<li>Location 对象包含有关当前URL的信息。</li>
<li>Location 对象是Window对象的一部分，可通过window.location属性来访问。</li>
</ul>
<h5 id="对象属性（可以获取和设置）："><a href="#对象属性（可以获取和设置）：" class="headerlink" title="对象属性（可以获取和设置）："></a>对象属性（可以获取和设置）：</h5><ul>
<li>hash：#后面的部分；</li>
<li>host：主机名和端口；</li>
<li>hostname: 主机名；</li>
<li>href：完整的url；</li>
<li>pathname: url路径名；</li>
<li>port：url服务器使用的端口号；</li>
<li>protocol：协议（http,https）;</li>
<li>search：从问号（？）开始的URL（查询部分）；</li>
</ul>
<h5 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h5><ul>
<li>assign() 重新加载文档；</li>
<li>reload() 重新加载当前文档；</li>
<li>replace() 用新的文档替换当前文档；</li>
</ul>
<p>在开发中一般会有dev,test,pre,master四种分支，所以接口也会有四种不同的形式，这个时候就可以根据location来做。根据不同路径进行判断不同的环境！</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var loaction_origin = location.origin;</div><div class="line"></div><div class="line">var API_ENV = &#123;</div><div class="line">    DEV:&apos;http://dev.abc.com/api&apos;,</div><div class="line">    TEST:&apos;http://test.abc.com/api&apos;,</div><div class="line">    PRE:&apos;http://pre.abc.com/api&apos;,</div><div class="line">    MASTER:&apos;http://abc.com/api&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var FE_ENV=&#123;</div><div class="line">    DEV:&apos;http://dev.abc.com&apos;,</div><div class="line">    TEST:&apos;http://test.abc.com&apos;,</div><div class="line">    PRE:&apos;http://pre.abc.com&apos;,</div><div class="line">    MASTER:&apos;http://dec.abc.com&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var API_URL = API_ENV.DEV;</div><div class="line"></div><div class="line">if(location.href.indexOf(FE_ENV.TEST) &gt; -1)&#123;</div><div class="line">    API_URL = API_ENV.TEST;</div><div class="line">&#125;else if(location.href.indexOf(FE_ENV.PRE) &gt; -1)&#123;</div><div class="line">    API_URL = API_ENV.PRE;</div><div class="line">&#125;else if(location.href.indexOf(FE_ENV.MASTER) &gt; -1)&#123;</div><div class="line">    API_URL = API_ENV.MASTER;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 一般都会将该段代码放在common.js里面，配置了这个每次切换环境就不需要每次都改了。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Location对象&quot;&gt;&lt;a href=&quot;#Location对象&quot; class=&quot;headerlink&quot; title=&quot;Location对象&quot;&gt;&lt;/a&gt;Location对象&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Location 对象包含有关当前URL的信息。&lt;/li&gt;
&lt;li&gt;Location 对象是Window对象的一部分，可通过window.location属性来访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;对象属性（可以获取和设置）：&quot;&gt;&lt;a href=&quot;#对象属性（可以获取和设置）：&quot; class=&quot;headerlink&quot; title=&quot;对象属性（可以获取和设置）：&quot;&gt;&lt;/a&gt;对象属性（可以获取和设置）：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;hash：#后面的部分；&lt;/li&gt;
&lt;li&gt;host：主机名和端口；&lt;/li&gt;
&lt;li&gt;hostname: 主机名；&lt;/li&gt;
&lt;li&gt;href：完整的url；&lt;/li&gt;
&lt;li&gt;pathname: url路径名；&lt;/li&gt;
&lt;li&gt;port：url服务器使用的端口号；&lt;/li&gt;
&lt;li&gt;protocol：协议（http,https）;&lt;/li&gt;
&lt;li&gt;search：从问号（？）开始的URL（查询部分）；&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;对象方法&quot;&gt;&lt;a href=&quot;#对象方法&quot; class=&quot;headerlink&quot; title=&quot;对象方法&quot;&gt;&lt;/a&gt;对象方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;assign() 重新加载文档；&lt;/li&gt;
&lt;li&gt;reload() 重新加载当前文档；&lt;/li&gt;
&lt;li&gt;replace() 用新的文档替换当前文档；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开发中一般会有dev,test,pre,master四种分支，所以接口也会有四种不同的形式，这个时候就可以根据location来做。根据不同路径进行判断不同的环境！&lt;/p&gt;
    
    </summary>
    
    
      <category term="location 环境配置" scheme="https://guimeisang.github.io/tags/location-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>优雅实现ueditor二次开发·自定义事件event</title>
    <link href="https://guimeisang.github.io/2017/04/20/%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0ueditor%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%C2%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6event/"/>
    <id>https://guimeisang.github.io/2017/04/20/优雅实现ueditor二次开发·自定义事件event/</id>
    <published>2017-04-20T04:44:21.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>ueditor优雅的实现方式，并且功能多样，性能不错。当然我们在使用ueditor进行二次开发的时候，会遇到很多它没有的功能。下面就是主要介绍怎么去优雅的二次开发ueditor。<br>自定义事件event</p>
</blockquote>
<a id="more"></a>  
<p><strong>需求场景：</strong> 在二次开发插件时，会发现有些地方，有些地方需要自定一个事件并且对应的函数。（其实回顾一下前端开发，都是各个事件组成，并且在这个事件发生时特定去做什么，这样就可以完成一般的需求了！）  </p>
<p><strong>ueditor的关于事件的设计（_src\core\EventBase.js中）</strong>  </p>
<p>可以先去下载ueditor项目的<code>\_src\core\EventBase.js</code>中看下源码</p>
<p>提炼一下就是：  </p>
<ul>
<li>不得不说下注释：   </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * UE采用的事件基类</div><div class="line"> * @file</div><div class="line"> * @module UE</div><div class="line"> * @class EventBase</div><div class="line"> * @since 1.2.6.1</div><div class="line"> */</div><div class="line"> </div><div class="line"> /**</div><div class="line"> * UEditor公用空间，UEditor所有的功能都挂载在该空间下</div><div class="line"> * @unfile</div><div class="line"> * @module UE</div><div class="line"> */</div><div class="line"> </div><div class="line"> /**</div><div class="line"> * UE采用的事件基类，继承此类的对应类将获取addListener,removeListener,fireEvent方法。</div><div class="line"> * 在UE中，Editor以及所有ui实例都继承了该类，故可以在对应的ui对象以及editor对象上使用上述方法。</div><div class="line"> * @unfile</div><div class="line"> * @module UE</div><div class="line"> * @class EventBase</div><div class="line"> */</div><div class="line"> </div><div class="line"> /**</div><div class="line"> * 通过此构造器，子类可以继承EventBase获取事件监听的方法</div><div class="line"> * @constructor</div><div class="line"> * @example</div><div class="line"> * ```javascript</div><div class="line"> * UE.EventBase.call(editor);</div><div class="line"> *</div></pre></td></tr></table></figure>
<p> */</p>
<p> /**</p>
<pre><code>* 注册事件监听器
* @method addListener
* @param { String } types 监听的事件名称，同时监听多个事件使用空格分隔
* @param { Function } fn 监听的事件被触发时，会执行该回调函数
* @waining 事件被触发时，监听的函数假如返回的值恒等于true，回调函数的队列中后面的函数将不执行
* @example
* <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">* editor.addListener(<span class="string">'selectionchange'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">*      <span class="built_in">console</span>.log(<span class="string">"选区已经变化！"</span>);</div><div class="line">* &#125;)</div><div class="line">* editor.addListener(<span class="string">'beforegetcontent aftergetcontent'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</div><div class="line">*         <span class="keyword">if</span>(type == <span class="string">'beforegetcontent'</span>)&#123;</div><div class="line">*             <span class="comment">//do something</span></div><div class="line">*         &#125;<span class="keyword">else</span>&#123;</div><div class="line">*             <span class="comment">//do something</span></div><div class="line">*         &#125;</div><div class="line">*         <span class="built_in">console</span>.log(<span class="keyword">this</span>.getContent) <span class="comment">// this是注册的事件的编辑器实例</span></div><div class="line">* &#125;)</div><div class="line">*</div></pre></td></tr></table></figure>

* @see UE.EventBase:fireEvent(String)
*/
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">第一个注释：解释这个文件的作用，并且从所属的模块，类名，第几个版本开始存在。  </div><div class="line">第二个注释：解释公共空间。  </div><div class="line">第三个注释：解释关于继承该类，从而获得方法的方式。Editor和ui实例都继承了该类。  </div><div class="line">第四个注释：解释这个一个构造器，UE.EventBase.call(editor);  </div><div class="line">第五个注释：解释注册事件监听器，包含了参数解释，例子；</div><div class="line"></div><div class="line">- 设计思想：  </div><div class="line"></div><div class="line">先构造一个类：</div></pre></td></tr></table></figure>
<p>var EventBase = UE.EventBase = function () {};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">对该类添加事件：</div></pre></td></tr></table></figure></p>
<p>EventBase.prototype = {<br>    addListener：function(types,listener){},<br>    on:function(types,listener){},<br>    off:function(types,listener){},<br>    trigger:function(){},<br>    removeListener:function(types,listener){}<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">也就是说可以添加事件，也可以移除事件，另外就是触发事件。  </div><div class="line"></div><div class="line">**二次开发中需要添加事件和触发事件**</div><div class="line"></div><div class="line">使用上面提供的方法，先定义事件，后触发事件。这样在二次开发中就可以自如对应事件，且比较优雅。</div></pre></td></tr></table></figure></p>
<p>/<em>
</em>@example<br><em>@addListener  在加载js之前自定义事件
</em>@fireEvent    在合适的时候触发事件<br>*/<br>editor.addListener(‘beforeevent’,function(){<br>    console.log(‘beforeevent’);<br>})</p>
<p>editor.fireEvent(‘beforeevent’);<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ueditor优雅的实现方式，并且功能多样，性能不错。当然我们在使用ueditor进行二次开发的时候，会遇到很多它没有的功能。下面就是主要介绍怎么去优雅的二次开发ueditor。&lt;br&gt;自定义事件event&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ueditor二次开发 自定义事件event" scheme="https://guimeisang.github.io/tags/ueditor%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6event/"/>
    
  </entry>
  
  <entry>
    <title>优雅实现ueditor二次开发·自定义UE.plugins&amp;&amp;execCommand()方法</title>
    <link href="https://guimeisang.github.io/2017/04/18/%E4%BC%98%E9%9B%85%E5%AE%9E%E7%8E%B0ueditor%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%C2%B7%E8%87%AA%E5%AE%9A%E4%B9%89UE-plugins-execCommand-%E6%96%B9%E6%B3%95/"/>
    <id>https://guimeisang.github.io/2017/04/18/优雅实现ueditor二次开发·自定义UE-plugins-execCommand-方法/</id>
    <published>2017-04-18T03:42:22.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>ueditor优雅的实现方式，并且功能多样，性能不错。当然我们在使用ueditor进行二次开发的时候，会遇到很多它没有的功能。下面就是主要介绍怎么去优雅的二次开发ueditor。  </p>
</blockquote>
<a id="more"></a>
<h3 id="自定义UE-plugins"><a href="#自定义UE-plugins" class="headerlink" title="自定义UE.plugins"></a>自定义UE.plugins</h3><p>ueditor会将一些属性和方法都绑定在命名空间上，一般会将UE，editor，ue绑定在window下面，所以我们在<a href="http://ueditor.baidu.com/website/onlinedemo.html" target="_blank" rel="external">ueditor demo</a>控制命版上就可以看到UE的结构。如下图：</p>
<p><img src="http://oi9n0t0p1.bkt.clouddn.com/2017/04/ueditorDemo.png" alt="ueditor demo"></p>
<p>在二次开发中，一般的思路是先定义方法，然后就是使用该方法。可以在图中看到UE下面有plugins对象，里面包括后退，恢复，设置行高等方法，如下图：  </p>
<p><img src="http://oi9n0t0p1.bkt.clouddn.com/2017/04/ueplugins.png" alt="UE plugins"></p>
<p>如果在二次开发中，成功添加添加plugins之后，能够在控制平台plugins对象中看到我们自定义的方法，说明添加成功！  </p>
<p><strong>体现优雅</strong>：可以在在另外一个文件夹中（取名“_custom_example”），把一些需要自定的js，css文件放置在其中，有利于后期维护（<strong>建议不要改动源码，除非实在没办法</strong>）;文件里面的注释也是必不可少的，比如：文件名称，文件版本，文件中方法，方法的参数，方法的返回等；<br><strong>注意</strong>： 在页面记得引入改js文件，并且在editor.all.min.js之后；  </p>
<p><strong>比如添加全选功能，并且alert(‘已经全选了’),即使它原来有改方法也没有关系，因为直接可以覆盖掉！</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * selectall(全选)</div><div class="line"> * @file selectall.js</div><div class="line"> * @description 覆盖 selectall 插件</div><div class="line"> * @method editor.execCommand( &apos;selectall&apos; );</div><div class="line"> * @result 全选选取的内容</div><div class="line"> */</div><div class="line"> UE.plugins[&apos;selectall&apos;] = function () &#123;</div><div class="line">    var me = this;</div><div class="line">    me.commands[&apos;selectall&apos;] = &#123;</div><div class="line">        execCommand: function() &#123;</div><div class="line">            var me = this, body = me.body,</div><div class="line">                range = me.selection.getRange();</div><div class="line">            var pgBodys = body.getElementByTagName(&apos;p&apos;);/*选中什么标签，看下你的editor编辑页面有哪些dom*/  </div><div class="line">            range.setStartAtFirst(pgBodys[0].firstChild).setEndAtLast(pgBodys[pgBodys.length-1].lastChild)</div><div class="line">        &#125;,</div><div class="line">        notNeedUndo: 1</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    // 快捷键</div><div class="line">    me.addshortcutkey(&#123;</div><div class="line">        &quot;selectAll&quot;:&quot;ctrl+65&quot;</div><div class="line">    &#125;);</div><div class="line"> </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这样就算定义完selecall的模块，相当于已经可以使用editor.execCommand(‘selectall’)；</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ueditor优雅的实现方式，并且功能多样，性能不错。当然我们在使用ueditor进行二次开发的时候，会遇到很多它没有的功能。下面就是主要介绍怎么去优雅的二次开发ueditor。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ueditor二次开发，ueditor自定义plugins和execCommand方法" scheme="https://guimeisang.github.io/tags/ueditor%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91%EF%BC%8Cueditor%E8%87%AA%E5%AE%9A%E4%B9%89plugins%E5%92%8CexecCommand%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>printThis体验</title>
    <link href="https://guimeisang.github.io/2017/04/18/printThis%E4%BD%93%E9%AA%8C/"/>
    <id>https://guimeisang.github.io/2017/04/18/printThis体验/</id>
    <published>2017-04-18T02:18:48.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>jQuery pringting plugin; print specific elements on a page;<br>自定义打印的jQuery插件</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$(&quot;#mySelector&quot;).printThis(&#123;</div><div class="line">    debug: false,               // show the iframe for debugging</div><div class="line">    importCSS: true,            // import page CSS</div><div class="line">    importStyle: false,         // import style tags</div><div class="line">    printContainer: true,       // grab outer container as well as the contents of the selector</div><div class="line">    loadCSS: &quot;path/to/my.css&quot;,  // path to additional css file - use an array [] for multiple</div><div class="line">    pageTitle: &quot;&quot;,              // add title to print page</div><div class="line">    removeInline: false,        // remove all inline styles from print elements</div><div class="line">    printDelay: 333,            // variable print delay; depending on complexity a higher value may be necessary</div><div class="line">    header: null,               // prefix to html</div><div class="line">    footer: null,               // postfix to html</div><div class="line">    base: false ,               // preserve the BASE tag, or accept a string for the URL</div><div class="line">    formValues: true,           // preserve input/form values</div><div class="line">    canvas: false,              // copy canvas elements (experimental)</div><div class="line">    doctypeString: &quot;...&quot;,       // enter a different doctype for older markup</div><div class="line">    removeScripts: false        // remove script tags from print content</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>坑点：</p>
<ol>
<li>css的样式，可以采用媒体查询设置打印的样式， @media print {…}   </li>
<li>可以同事打印几个dom   </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&apos;#kitty-one, #kitty-two, #kitty-three&apos;).printThis(&#123;</div><div class="line">    importCSS: false,</div><div class="line">    loadCSS: &quot;&quot;,</div><div class="line">    header: &quot;&lt;h1&gt;Look at all of my kitties!&lt;/h1&gt;&quot;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;jQuery pringting plugin; print specific elements on a page;&lt;br&gt;自定义打印的jQuery插件&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="jQuery插件" scheme="https://guimeisang.github.io/tags/jQuery%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>页面dom的绑定js事件对应的代码位置</title>
    <link href="https://guimeisang.github.io/2017/04/08/%E9%A1%B5%E9%9D%A2dom%E7%9A%84%E7%BB%91%E5%AE%9Ajs%E4%BA%8B%E4%BB%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BD%8D%E7%BD%AE/"/>
    <id>https://guimeisang.github.io/2017/04/08/页面dom的绑定js事件对应的代码位置/</id>
    <published>2017-04-08T10:09:42.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="页面dom的绑定js事件对应的代码位置"><a href="#页面dom的绑定js事件对应的代码位置" class="headerlink" title="页面dom的绑定js事件对应的代码位置"></a>页面dom的绑定js事件对应的代码位置</h3><p>背景：平时我们在调试的时候想知道页面上的某一个dom上绑定了什么事件以及绑定代码的位置，下面就介绍三种跟踪页面dom的事件的方法。  </p>
<a id="more"></a>
<ol>
<li><p>使用firefox调试。<br>我们可以使用firefox的debug工具，找到指定的元素，然后查看事件面板<br> <img src="http://oi9n0t0p1.bkt.clouddn.com/blog/201704jsdebug1.png" alt="image">   </p>
</li>
<li><p>使用chrome调试。<br>在检查的元素上查看面板，在EventListeners标签，可以看到相关事件的绑定信息，点击相应的文件可以跳转到事件定义代码在文件中的位置。<br><img src="http://oi9n0t0p1.bkt.clouddn.com/blog/201704jsdebug2.png" alt="image"></p>
</li>
</ol>
<ol>
<li>使用chrome web store中的Visual Event检查事件绑定信息<br>上面两个方法，当我们定位事件代码的位置时，如果我们使用js库（比如jquery）的话，调试工作会变得复杂，程序往往会讲我们引导到jquery库中，这样的话仍然是不方便找到哪个文件中addEventListener的事件、这样就可以安装Visual Event。<br>安装完 Visual Event 后，工具条上会有 Visual Event 的图标。然后打开我们要调试的页面，在工具栏上点击他那个火眼金睛一样的眼睛图标，网页上所有绑定了事件的 HTML 元素都会由一个半透明的蓝色遮罩层覆盖，鼠标移动到相应的元素上即可看到事件绑定信息。<br>刚才说了，在使用了Js 库的时候，visual event 依然很好用，下面列出它支持的几个库的名字及版本信息：  </li>
</ol>
<p>获取Visual Event：  </p>
<ul>
<li>VisualEvent 在GitHub上的位置 ：<a href="https://github.com/DataTables/VisualEvent" target="_blank" rel="external">https://github.com/DataTables/VisualEvent</a></li>
<li>VisualEvent 在Chrome webstore 上的位置：<a href="https://chrome.google.com/webstore/detail/visual-event/pbmmieigblcbldgdokdjpioljjninaim" target="_blank" rel="external">https://chrome.google.com/webstore/detail/visual-event/pbmmieigblcbldgdokdjpioljjninaim</a>   </li>
</ul>
<ol>
<li>如果都没有办法，则需要在js文件中不断的debug和梳理js逻辑  </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;页面dom的绑定js事件对应的代码位置&quot;&gt;&lt;a href=&quot;#页面dom的绑定js事件对应的代码位置&quot; class=&quot;headerlink&quot; title=&quot;页面dom的绑定js事件对应的代码位置&quot;&gt;&lt;/a&gt;页面dom的绑定js事件对应的代码位置&lt;/h3&gt;&lt;p&gt;背景：平时我们在调试的时候想知道页面上的某一个dom上绑定了什么事件以及绑定代码的位置，下面就介绍三种跟踪页面dom的事件的方法。  &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>angular中ng-show和ng-if的微妙区别</title>
    <link href="https://guimeisang.github.io/2017/04/08/angular%E4%B8%ADng-show%E5%92%8Cng-if%E7%9A%84%E5%BE%AE%E5%A6%99%E5%8C%BA%E5%88%AB/"/>
    <id>https://guimeisang.github.io/2017/04/08/angular中ng-show和ng-if的微妙区别/</id>
    <published>2017-04-08T10:09:12.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>场景：最近在使用插件时，发现如果是使用ng-if时，jquery很有可能获取不到这个元素。但是ng-show是可以获取到的。    </p>
<p>分析：可能ng-if不会在页面进入的时候渲染。只有在条件符合的时候才会去触发；但是ng-show会在页面渲染的时候就会渲染，所以在使用插件的时候，ng-show可以直接获取到这个dom</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景：最近在使用插件时，发现如果是使用ng-if时，jquery很有可能获取不到这个元素。但是ng-show是可以获取到的。    &lt;/p&gt;
&lt;p&gt;分析：可能ng-if不会在页面进入的时候渲染。只有在条件符合的时候才会去触发；但是ng-show会在页面渲染的时候就会渲染，所
    
    </summary>
    
    
      <category term="angular" scheme="https://guimeisang.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>js控制滚动条的位置</title>
    <link href="https://guimeisang.github.io/2017/04/08/js%E6%8E%A7%E5%88%B6%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E4%BD%8D%E7%BD%AE/"/>
    <id>https://guimeisang.github.io/2017/04/08/js控制滚动条的位置/</id>
    <published>2017-04-08T10:08:45.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>场景： 控制dom元素内的滚动条，需要控制滚动条的位置。</p>
<a id="more"></a>
<p><strong>HTML</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;scroll-wrap&quot; style=&quot;overflowY:scroll&quot;&gt;</div><div class="line">    &lt;div id=&apos;div1&apos;&gt;1&lt;/div&gt;</div><div class="line">    &lt;div id=&apos;div2&apos;&gt;2&lt;/div&gt;</div><div class="line">    &lt;div id=&apos;div3&apos;&gt;3&lt;/div&gt;</div><div class="line">    &lt;div id=&apos;div4&apos;&gt;4&lt;/div&gt;</div><div class="line">    &lt;div id=&apos;div5&apos;&gt;5&lt;/div&gt;</div><div class="line">    &lt;div id=&apos;div6&apos;&gt;6&lt;/div&gt;</div><div class="line">    &lt;div id=&apos;div7&apos;&gt;7&lt;/div&gt;</div><div class="line">    ....</div><div class="line">    &lt;div id=&apos;div100&apos;&gt;100&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p><strong>js</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(function($)&#123;</div><div class="line">    $(&apos;div.scroll-warp&apos;).scrollTop = $(&apos;#div50&apos;).offsetTop;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>注意这样的话可以通过计算得到需要移动的距离，具体可以参考下面这个图   </p>
<p><img src="http://oi9n0t0p1.bkt.clouddn.com/blog/201704/scroll.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景： 控制dom元素内的滚动条，需要控制滚动条的位置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js小效果" scheme="https://guimeisang.github.io/tags/js%E5%B0%8F%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>移动端打印调试介绍</title>
    <link href="https://guimeisang.github.io/2017/04/08/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%93%E5%8D%B0%E8%B0%83%E8%AF%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://guimeisang.github.io/2017/04/08/移动端打印调试介绍/</id>
    <published>2017-04-08T10:08:28.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="移动端打印调试介绍-debug-js"><a href="#移动端打印调试介绍-debug-js" class="headerlink" title="移动端打印调试介绍-debug.js"></a>移动端打印调试介绍-debug.js</h3><p>在移动端，js调试。alert的手段在简单的调试中还是蛮有效的，但是alert会将输出的对象toString()方法，这样有些对象alert就会有”[object object]”的字样。还有另外一个方法就是debug.js。<br>debug.js会将调试信息显示在网页上，其实原理也十分简单，就是动态的创建DOM元素，然后append到页面上。<br>使用方法很简单，现在页面上引入debug.js，然后用它的debug.log API，跟console.log用法一样一样的。  </p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;iframe src=&apos;http://www.cnblogs.com&apos; style=&apos;width:100%; height:100%&apos;&gt; &lt;/iframe&gt;</div><div class="line">&lt;script src=&quot;debug.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  var a = &#123;name: &apos;hanzichi&apos;, age: 10&#125;;</div><div class="line">  debug.log(a);</div><div class="line"></div><div class="line">  var b = [1, 2, 3];</div><div class="line">  debug.log(b);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><img src="http://oi9n0t0p1.bkt.clouddn.com/blog/201704/jsdebug3.png" alt="image"><br>触碰下调试信息，它就会隐藏掉。  </p>
<p><a href="https://github.com/binnng/debug.js" target="_blank" rel="external">debug.js Github</a><br><a href="http://binnng.github.io/debug.js/docs/debug.html" target="_blank" rel="external">DEBUG.COFFEE</a>   </p>
<blockquote>
<p>使用fiddler代理调试本地手机页面   </p>
</blockquote>
<p>在调试移动端页面上时，虽然90%的功能都能用chrome下的模拟器来模拟解决，但是剩余的10%却只能在真机上调试。比如一两个像素的误差，比如说只有真机上才能重现一些bug，所以用fiddler来调试本地页面。  </p>
<ol>
<li><p>首先就是安装fiddler，然后按照下图进行配置fiddler：<br><img src="http://oi9n0t0p1.bkt.clouddn.com/blog/201704/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%951.png" alt="image">   </p>
</li>
<li><p>其次在手机上长按wifi，按照下图进行配置：<br><img src="http://oi9n0t0p1.bkt.clouddn.com/blog/201704/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%952.png" alt="image">  </p>
</li>
<li><p>调试：  </p>
<blockquote>
<p>接下来就可以用手机浏览器调试本地页面了，但是还是有几点要注意：  </p>
<ul>
<li>在本地搭建好服务器后，不能用 localhost 在移动端进行访问，也不能用 127.0.0.1。可以随便绑定一个地址，比如 127.0.0.1 www.cnblogs.com（hosts 文件中，如果之前修改了 vhosts 文件，那么 vhosts 文件也要一并修改）  </li>
<li>我手机上有 4 个浏览器，uc、chrome、2345以及百度，前三个都能得到预想的结果，但是百度浏览器不知道为何却不能重定向。有时候不行的话或者可以试试别的浏览器，对我而言一个浏览器能出结果就已经 ok 了。  </li>
<li>如果浏览器安装了代理插件，禁用代理插件或改为系统代理，否则 fiddler 捕捉不到请求<br><img src="http://oi9n0t0p1.bkt.clouddn.com/blog/201704/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%953.png" alt="image"></li>
</ul>
</blockquote>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;移动端打印调试介绍-debug-js&quot;&gt;&lt;a href=&quot;#移动端打印调试介绍-debug-js&quot; class=&quot;headerlink&quot; title=&quot;移动端打印调试介绍-debug.js&quot;&gt;&lt;/a&gt;移动端打印调试介绍-debug.js&lt;/h3&gt;&lt;p&gt;在移动端，js调试。alert的手段在简单的调试中还是蛮有效的，但是alert会将输出的对象toString()方法，这样有些对象alert就会有”[object object]”的字样。还有另外一个方法就是debug.js。&lt;br&gt;debug.js会将调试信息显示在网页上，其实原理也十分简单，就是动态的创建DOM元素，然后append到页面上。&lt;br&gt;使用方法很简单，现在页面上引入debug.js，然后用它的debug.log API，跟console.log用法一样一样的。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="移动端 调试" scheme="https://guimeisang.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF-%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>201703angular1.3父子通信</title>
    <link href="https://guimeisang.github.io/2017/03/28/201703angular1-3%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1/"/>
    <id>https://guimeisang.github.io/2017/03/28/201703angular1-3父子通信/</id>
    <published>2017-03-28T04:52:03.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Angularjs-利用-on、-emit和-broadcast传值"><a href="#Angularjs-利用-on、-emit和-broadcast传值" class="headerlink" title="Angularjs 利用 $on、$emit和$broadcast传值"></a>Angularjs 利用 $on、$emit和$broadcast传值</h2><p><strong>$emit只能向父controller传递event与data</strong><br>$scope.$emit(“参数名称”,参数值);</p>
<p><strong>$broadcast只能向子controller传递event与data</strong>                                        $scope.$broadcast(“参数名称”,参数值);</p>
<p><strong>$on用于接收event与data</strong><br>$scope.$on(“参数名称”,function(e,data){<br>   console.log(data);<br>});</p>
<a id="more"></a>
<p><strong>利用$watch监听模型变化</strong><br>$watch是一个scope函数，用于监听模型变化，当你的模型部分发生变化时它会通知你。</p>
<h3 id="watch-watchExpression-listener-objectEquality"><a href="#watch-watchExpression-listener-objectEquality" class="headerlink" title="$watch(watchExpression, listener, objectEquality);"></a>$watch(watchExpression, listener, objectEquality);</h3><p>每个参数的说明如下：</p>
<p><strong>watchExpression</strong>：监听的对象，它可以是一个angular表达式如’name’,或函数如function(){return $scope.name}。</p>
<p><strong>listener</strong>: 当watchExpression变化时会被调用的函数或者表达式,它接收3个参数：newValue(新值), oldValue(旧值), scope(作用域的引用)</p>
<p><strong>objectEquality</strong>：是否深度监听，如果设置为true,它告诉Angular检查所监控的对象中每一个属性的变化. 如果你希望监控数组的个别元素或者对象的属性而不是一个普通的值, 那么你应该使用它</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var watch = $scope.$watch(&apos;被监听模型&apos;,function(newValue,oldValue, scope)&#123;</div><div class="line"></div><div class="line">        console.log(newValue);</div><div class="line"></div><div class="line">        console.log(oldValue);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Angularjs-利用-on、-emit和-broadcast传值&quot;&gt;&lt;a href=&quot;#Angularjs-利用-on、-emit和-broadcast传值&quot; class=&quot;headerlink&quot; title=&quot;Angularjs 利用 $on、$emit和$broadcast传值&quot;&gt;&lt;/a&gt;Angularjs 利用 $on、$emit和$broadcast传值&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;$emit只能向父controller传递event与data&lt;/strong&gt;&lt;br&gt;$scope.$emit(“参数名称”,参数值);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$broadcast只能向子controller传递event与data&lt;/strong&gt;                                        $scope.$broadcast(“参数名称”,参数值);&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$on用于接收event与data&lt;/strong&gt;&lt;br&gt;$scope.$on(“参数名称”,function(e,data){&lt;br&gt;   console.log(data);&lt;br&gt;});&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular 1.3 父子通信技术总结" scheme="https://guimeisang.github.io/tags/angular-1-3-%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>201703前端和UI合作规范的一些想法</title>
    <link href="https://guimeisang.github.io/2017/03/28/201703%E5%89%8D%E7%AB%AF%E5%92%8CUI%E5%90%88%E4%BD%9C%E8%A7%84%E8%8C%83%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
    <id>https://guimeisang.github.io/2017/03/28/201703前端和UI合作规范的一些想法/</id>
    <published>2017-03-28T04:49:58.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端、UI岗位合作规范总结和建议"><a href="#前端、UI岗位合作规范总结和建议" class="headerlink" title="前端、UI岗位合作规范总结和建议"></a>前端、UI岗位合作规范总结和建议</h1><h3 id="目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间"><a href="#目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间" class="headerlink" title="目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间!"></a>目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间!</h3><a id="more"></a>
<ul>
<li><p>切图：  </p>
<ul>
<li>一个页面top,banner,nav,content,foot按区域分类切图！并放置在不同的文件夹。</li>
<li>部分功能的切图，也可以单独分为一个文件夹；</li>
<li>切图一般要注意涵盖icon，不规则背景图等（这些是前端经常写页面是需要的）；</li>
</ul>
</li>
<li><p>批注：</p>
<ul>
<li><strong>整体风格和习惯（重要）</strong>：任何修改更新到psd，不接受口头通知前端，录到worktitle；bug请录到work云上（请区别好bug和更新修改！bug代表的只是没有按照psd文档来做的。请不要混杂修改，更新！）；效果图必须评审可执行性！所有页面必须有一个比较合理，确定的风格（避免多频率的返工）；有些页面在没有数据时的样式，数据过多，内容过多的样式（重要，这个最容易忽视！！！） </li>
<li>注意部分地方有<strong>不同状态下</strong>（划过，选中，默认）的样式；</li>
<li>多做注释！！！</li>
<li><strong>整体页面</strong>：宽高，边框，边间距； </li>
<li><strong>字</strong>：字体，大小，颜色，是否加粗，是否斜体（若要其他效果请特别标明！）； </li>
<li><strong>边框</strong>：宽度，形式（虚线还是实线），颜色，圆角半径（若要其他效果请特别标明！）； </li>
<li><strong>背景</strong>：颜色，图案在当前框内的位置，是否重复填充；</li>
<li><strong>间距</strong>：以左上角为原点，进行标注间距；</li>
</ul>
</li>
<li><p>实例：<br><img src="http://oi9n0t0p1.bkt.clouddn.com/attament.png" alt="image"></p>
</li>
</ul>
<h4 id="注意：合作规范会随着团队不断合作，出现新的问题而更新"><a href="#注意：合作规范会随着团队不断合作，出现新的问题而更新" class="headerlink" title="注意：合作规范会随着团队不断合作，出现新的问题而更新"></a>注意：合作规范会随着团队不断合作，出现新的问题而更新</h4>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端、UI岗位合作规范总结和建议&quot;&gt;&lt;a href=&quot;#前端、UI岗位合作规范总结和建议&quot; class=&quot;headerlink&quot; title=&quot;前端、UI岗位合作规范总结和建议&quot;&gt;&lt;/a&gt;前端、UI岗位合作规范总结和建议&lt;/h1&gt;&lt;h3 id=&quot;目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间&quot;&gt;&lt;a href=&quot;#目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间&quot; class=&quot;headerlink&quot; title=&quot;目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间!&quot;&gt;&lt;/a&gt;目的：为了前端和UI合作顺畅，工作内容界限清晰！为了UI问题前置，缩减整个开发周期的时间!&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端和UI合作规范" scheme="https://guimeisang.github.io/tags/%E5%89%8D%E7%AB%AF%E5%92%8CUI%E5%90%88%E4%BD%9C%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>201703前后端</title>
    <link href="https://guimeisang.github.io/2017/03/28/201703%E5%89%8D%E5%90%8E%E7%AB%AF/"/>
    <id>https://guimeisang.github.io/2017/03/28/201703前后端/</id>
    <published>2017-03-28T04:46:38.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="情景模式："><a href="#情景模式：" class="headerlink" title="情景模式："></a>情景模式：</h4><p>很多次和后端调参的时候，发现自己效率很低，这个问题导致了自己没什么时间去调试和优化自己的前端代码，每次上线前都基本上没有精力去做代码优化。  </p>
<h4 id="先给自己提几个问题吧"><a href="#先给自己提几个问题吧" class="headerlink" title="先给自己提几个问题吧"></a>先给自己提几个问题吧</h4><ul>
<li>是业务不太熟悉，或者是在脑海中没有形成业务闭环；</li>
<li>传参错误的次数好像还是很多，为什么会这么多，怎么减少？  </li>
<li>前后端调试，如果是我能学会测试的技能，就可以提高一部分调试的准确性，可以在通知后端之前就把错误定位好</li>
<li>前期我真正需要向后端知道的数据是什么？</li>
<li>前期需要准备什么才能顺利开展工作，中期如何克制自己的情绪才能稳定对接，后期如何鼓励自己优化代码；这些都是自己的不足之处  </li>
</ul>
<a id="more"></a>
<h4 id="先给出怎么样才能不需要强依赖后端去为我们造数据"><a href="#先给出怎么样才能不需要强依赖后端去为我们造数据" class="headerlink" title="先给出怎么样才能不需要强依赖后端去为我们造数据"></a>先给出怎么样才能不需要强依赖后端去为我们造数据</h4><ol>
<li>先举个例子：<br>在制作列表页面的交互的时候，页面都是依赖于数据进行展示的，<br><img src="http://oi9n0t0p1.bkt.clouddn.com/list.png" alt="image"><br>列表中的资源是有不同的状态，里面的不同的状态来显示不同的交互已经页面，所以在有强依赖于业务逻辑，并且后端此时没有时间去帮助造数据。 这个是需要造数据。<br><img src="http://oi9n0t0p1.bkt.clouddn.com/list_data.png" alt="image"><br>这是一个json格式的数据，也就是仿照后端返回的数据结构来写的，然后通过改里面的数据来控制状态，从而显示不同的交互。<br><img src="http://oi9n0t0p1.bkt.clouddn.com/list_data_set.png" alt="image"><br>然后在fiddler里面设置规则，监听如果是跳去这个接口的时候则更换返回的json数据即可，这样的话，这样就可以自动的造数据，造我们需要的数据<br><img src="http://oi9n0t0p1.bkt.clouddn.com/list_finished.png" alt="image"><br>这样就可以有我们想要的假数据，这就完全能够满足我们写样式时的需求了。  </li>
</ol>
<p><strong>总结： 这个方法，需要后端不仅要给出接口，还要给出这个接口对应的数据结构。</strong>   </p>
<h4 id="怎么去理解后端接口的问题"><a href="#怎么去理解后端接口的问题" class="headerlink" title="怎么去理解后端接口的问题"></a>怎么去理解后端接口的问题</h4><ul>
<li>首先，前端需要的数据，可以分类，一种是前端展示的数据，这种是没那么重要的参数。再次就是用来交互，业务做为判断条件的参数。这些至关重要。  接到一个业务的时候，首先应该考量的是那些业务我是需要后端传参过来我才能判断的交互，或者说业务逻辑   </li>
<li>其次的话，就是后端需要的数据。首先前端接到一个业务的时候，先判断的是字段之间关系，理清了关系之后再写代码，评估数据结构的关系，再次得是显示的字段（这是最为其次的东西），后端的接口，为什么需要前端传参，因为后端需要前端的传参，来作为判断条件，所以参数一定不要出问题   </li>
</ul>
<h4 id="怎么定位问题"><a href="#怎么定位问题" class="headerlink" title="怎么定位问题"></a>怎么定位问题</h4><p>当出现一个系统异常的时候，可以看后端的日志，来判断是前端传参错误还是后端的错误。<br>当然也可以通过去前端服务器看错误日志：<br>先连接服务器————&gt; cd /usr/local/run/tomcat-test/logs/quetion-logs<br>然后在这个文件夹中，打开tail -f springmvc.2017-03-01.log 就可以查看一波到底是前端的问题，还是后端的问题。</p>
<p>现在后端的接口调错工具<br>命令： less catalina-daemon.out<br>位置： /data/tomcat-dev/logs</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;情景模式：&quot;&gt;&lt;a href=&quot;#情景模式：&quot; class=&quot;headerlink&quot; title=&quot;情景模式：&quot;&gt;&lt;/a&gt;情景模式：&lt;/h4&gt;&lt;p&gt;很多次和后端调参的时候，发现自己效率很低，这个问题导致了自己没什么时间去调试和优化自己的前端代码，每次上线前都基本上没有精力去做代码优化。  &lt;/p&gt;
&lt;h4 id=&quot;先给自己提几个问题吧&quot;&gt;&lt;a href=&quot;#先给自己提几个问题吧&quot; class=&quot;headerlink&quot; title=&quot;先给自己提几个问题吧&quot;&gt;&lt;/a&gt;先给自己提几个问题吧&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;是业务不太熟悉，或者是在脑海中没有形成业务闭环；&lt;/li&gt;
&lt;li&gt;传参错误的次数好像还是很多，为什么会这么多，怎么减少？  &lt;/li&gt;
&lt;li&gt;前后端调试，如果是我能学会测试的技能，就可以提高一部分调试的准确性，可以在通知后端之前就把错误定位好&lt;/li&gt;
&lt;li&gt;前期我真正需要向后端知道的数据是什么？&lt;/li&gt;
&lt;li&gt;前期需要准备什么才能顺利开展工作，中期如何克制自己的情绪才能稳定对接，后期如何鼓励自己优化代码；这些都是自己的不足之处  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前后端分离问题总结" scheme="https://guimeisang.github.io/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>上传头像插件</title>
    <link href="https://guimeisang.github.io/2017/01/18/%E4%B8%8A%E4%BC%A0%E5%A4%B4%E5%83%8F%E6%8F%92%E4%BB%B6/"/>
    <id>https://guimeisang.github.io/2017/01/18/上传头像插件/</id>
    <published>2017-01-18T09:18:47.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="上传头像插件"><a href="#上传头像插件" class="headerlink" title="上传头像插件"></a>上传头像插件</h3><p>目的： 帮助开发者快速开发上传头像功能点</p>
<p>背景： 现在b，g能搜到的头像上传插件并不太好用，所以想提供一个比较自由度的上传并且可以剪切的插件。</p>
<p>资源： 具体资源请查看<a href="https://github.com/guimeisang/avatar" target="_blank" rel="external">这里</a></p>
<p>实现大致思路如下：</p>
<a id="more"></a>
<ol>
<li>先有一个上传的（本地上传的功能），然后获取图片的地址。</li>
<li>获取图片地址之后，进行截取图片（这里推荐一个插件）<a href="https://fengyuanchen.github.io/cropperjs/" target="_blank" rel="external">点这里</a>，具体怎么用就不再赘述。</li>
<li>等截取图片之后，需要将截取的文件转换为二进制大文件。$(‘#image’).cropper(‘getCroppedCanvas’).toBlob();</li>
<li>调取接口，将二进制大文件上传即可。</li>
</ol>
<p>直接上代码吧：</p>
<ol>
<li>先引入如下文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cropper.js [点这里](https://github.com/fengyuanchen/cropperjs)</div></pre></td></tr></table></figure>
<ol>
<li>具体业务代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line">$(function () &#123;</div><div class="line">       var URL = window.URL || window.webkitURL;</div><div class="line">       var $image = $(&apos;#image&apos;);</div><div class="line">       var $rotate = $(&apos;#userImg_rotate&apos;);</div><div class="line">       var $reUpload = $(&apos;#userImg_reUpload&apos;);</div><div class="line">       var $zoomOut = $(&apos;#userImg_zoomOut&apos;);</div><div class="line">       var $zoomIn = $(&apos;#userImg_zoomIn&apos;);</div><div class="line">       var $save = $(&apos;#userImg_save&apos;);</div><div class="line">       var croppable = false;</div><div class="line">       var $previews = $(&apos;.userImg_preview&apos;);</div><div class="line">       var options = &#123;</div><div class="line">           aspectRatio: 1,</div><div class="line">           viewMode: 1,</div><div class="line">           built: function () &#123;</div><div class="line">               croppable = true;</div><div class="line">           &#125;,</div><div class="line">           build: function (e) &#123;</div><div class="line">               var $clone = $(this).clone();</div><div class="line"></div><div class="line">               $clone.css(&#123;</div><div class="line">                   display: &apos;block&apos;,</div><div class="line">                   width: &apos;100%&apos;,</div><div class="line">                   minWidth: 0,</div><div class="line">                   minHeight: 0,</div><div class="line">                   maxWidth: &apos;none&apos;,</div><div class="line">                   maxHeight: &apos;none&apos;</div><div class="line">               &#125;);</div><div class="line"></div><div class="line">               $previews.css(&#123;</div><div class="line">                   width: &apos;100%&apos;,</div><div class="line">                   overflow: &apos;hidden&apos;</div><div class="line">               &#125;).html($clone);</div><div class="line">           &#125;,</div><div class="line">           crop: function (e) &#123;</div><div class="line">               var imageData = $(this).cropper(&apos;getImageData&apos;);</div><div class="line">               var previewAspectRatio = e.width / e.height;</div><div class="line"></div><div class="line">               $previews.each(function () &#123;</div><div class="line">                   var $preview = $(this);</div><div class="line">                   var previewWidth = $preview.width();</div><div class="line">                   var previewHeight = previewWidth / previewAspectRatio;</div><div class="line">                   var imageScaledRatio = e.width / previewWidth;</div><div class="line"></div><div class="line">                   $preview.height(previewHeight).find(&apos;img&apos;).css(&#123;</div><div class="line">                       width: imageData.naturalWidth / imageScaledRatio,</div><div class="line">                       height: imageData.naturalHeight / imageScaledRatio,</div><div class="line">                       marginLeft: -e.x / imageScaledRatio,</div><div class="line">                       marginTop: -e.y / imageScaledRatio</div><div class="line">                   &#125;);</div><div class="line">               &#125;);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">       var originalImageURL = $scope.userInfo_imgUrl;</div><div class="line">       var uploadedImageURL;</div><div class="line"></div><div class="line">       $scope.initCropper = function()&#123;</div><div class="line">           // init</div><div class="line">           $image.attr(&apos;src&apos;,$scope.userInfo_imgUrl).cropper(options);</div><div class="line">       &#125;;</div><div class="line"></div><div class="line">       // rotate</div><div class="line">       $rotate.on(&apos;click&apos;, function()&#123;</div><div class="line">           $image.cropper(&apos;rotate&apos;, 90);</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       // zoomOut</div><div class="line">       $zoomOut.on(&apos;click&apos;,function()&#123;</div><div class="line">           $image.cropper(&apos;zoom&apos;, -0.1);</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       // zoomIn</div><div class="line">       $zoomIn.on(&apos;click&apos;,function()&#123;</div><div class="line">           $image.cropper(&apos;zoom&apos;, 0.1);</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       // Move</div><div class="line">       /*$move.on(&apos;click&apos;,function()&#123;</div><div class="line">           $image.cropper(&apos;setDragMode&apos;);</div><div class="line">       &#125;);*/</div><div class="line"></div><div class="line">       // reUpload</div><div class="line">       $reUpload.on(&apos;click&apos;,function()&#123;</div><div class="line">           $image.cropper(&apos;destroy&apos;).attr(&apos;src&apos;, $scope.userInfo_imgUrl).cropper(options);</div><div class="line">           if (uploadedImageURL) &#123;</div><div class="line">               URL.revokeObjectURL(uploadedImageURL);</div><div class="line">               uploadedImageURL = &apos;&apos;;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       // Keyboard</div><div class="line">       $(document.body).on(&apos;keydown&apos;, function (e) &#123;</div><div class="line"></div><div class="line">           if (!$image.data(&apos;cropper&apos;) || this.scrollTop &gt; 300) &#123;</div><div class="line">               return;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           switch (e.which) &#123;</div><div class="line">               case 37:</div><div class="line">                   e.preventDefault();</div><div class="line">                   $image.cropper(&apos;move&apos;, -1, 0);</div><div class="line">                   break;</div><div class="line"></div><div class="line">               case 38:</div><div class="line">                   e.preventDefault();</div><div class="line">                   $image.cropper(&apos;move&apos;, 0, -1);</div><div class="line">                   break;</div><div class="line"></div><div class="line">               case 39:</div><div class="line">                   e.preventDefault();</div><div class="line">                   $image.cropper(&apos;move&apos;, 1, 0);</div><div class="line">                   break;</div><div class="line"></div><div class="line">               case 40:</div><div class="line">                   e.preventDefault();</div><div class="line">                   $image.cropper(&apos;move&apos;, 0, 1);</div><div class="line">                   break;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125;);</div><div class="line"></div><div class="line">       // 剪切和确定上传图片</div><div class="line">       $save.on(&apos;click&apos;,function()&#123;</div><div class="line">           common.Loading.show();</div><div class="line">           $(&apos;#image&apos;).cropper(&apos;getCroppedCanvas&apos;).toBlob(function (blob) &#123;</div><div class="line">               var formData = new FormData();</div><div class="line"></div><div class="line">               formData.append(&apos;photoFile&apos;, blob);</div><div class="line"></div><div class="line">               // 这里写入后端给你的上传接口</div><div class="line">               $.ajax(API_URL+&apos;&apos;, &#123;</div><div class="line">                   method: &quot;POST&quot;,</div><div class="line">                   data: formData,</div><div class="line">                   headers: &#123;</div><div class="line">                       &apos;auth-token&apos; : common.Cookie.get(&apos;token&apos;)</div><div class="line">                   &#125;,</div><div class="line">                   processData: false,</div><div class="line">                   contentType: false,</div><div class="line">                   success: function (res) &#123;</div><div class="line">                       common.Loading.hide();</div><div class="line">                       common.Toast.show(&apos;头像上传成功！&apos;);</div><div class="line">                       try&#123;</div><div class="line">                           $scope.$apply(function()&#123;</div><div class="line">                               $scope.isShowUnCompleteInfoBox = false;</div><div class="line">                               $scope.isShowCompleteInfoBox = false;</div><div class="line">                               $scope.userInfo_imgUrl = res.data;</div><div class="line">                           &#125;)</div><div class="line">                       &#125;catch(err)&#123;</div><div class="line">                           console.log(err)</div><div class="line">                       &#125;</div><div class="line">                   &#125;,</div><div class="line">                   error: function () &#123;</div><div class="line">                       common.Toast.show(&apos;头像上传失败！&apos;);</div><div class="line">                   &#125;</div><div class="line">               &#125;);</div><div class="line">           &#125;);</div><div class="line">       &#125;)</div><div class="line"></div><div class="line">       // 上传图片，这里传本地的图片并且获取一个本地图片的路径</div><div class="line">       var $inputImage = $(&apos;#inputImage&apos;);</div><div class="line">       if (URL) &#123;</div><div class="line">           $inputImage.change(function () &#123;</div><div class="line">               var files = this.files;</div><div class="line">               var file;</div><div class="line"></div><div class="line">               if (!$image.data(&apos;cropper&apos;)) &#123;</div><div class="line">                   return;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               if (files &amp;&amp; files.length) &#123;</div><div class="line">                   file = files[0];</div><div class="line"></div><div class="line">                   if (/^image\/\w+$/.test(file.type)) &#123;</div><div class="line">                       if (uploadedImageURL) &#123;</div><div class="line">                           URL.revokeObjectURL(uploadedImageURL);</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       uploadedImageURL = URL.createObjectURL(file);</div><div class="line">                       $image.cropper(&apos;destroy&apos;).attr(&apos;src&apos;, uploadedImageURL).cropper(options);</div><div class="line">                       $inputImage.val(&apos;&apos;);</div><div class="line">                   &#125; else &#123;</div><div class="line">                       common.Toast.show(&apos;请选择图片再上传！&apos;)</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">       &#125; else &#123;</div><div class="line">           $inputImage.prop(&apos;disabled&apos;, true).parent().addClass(&apos;disabled&apos;);</div><div class="line">       &#125;</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;上传头像插件&quot;&gt;&lt;a href=&quot;#上传头像插件&quot; class=&quot;headerlink&quot; title=&quot;上传头像插件&quot;&gt;&lt;/a&gt;上传头像插件&lt;/h3&gt;&lt;p&gt;目的： 帮助开发者快速开发上传头像功能点&lt;/p&gt;
&lt;p&gt;背景： 现在b，g能搜到的头像上传插件并不太好用，所以想提供一个比较自由度的上传并且可以剪切的插件。&lt;/p&gt;
&lt;p&gt;资源： 具体资源请查看&lt;a href=&quot;https://github.com/guimeisang/avatar&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实现大致思路如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="插件" scheme="https://guimeisang.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>nodejs批量修改图片名称</title>
    <link href="https://guimeisang.github.io/2017/01/10/nodejs%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%90%8D%E7%A7%B0/"/>
    <id>https://guimeisang.github.io/2017/01/10/nodejs批量修改图片名称/</id>
    <published>2017-01-10T06:14:37.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nodejs批量修改图片名称"><a href="#nodejs批量修改图片名称" class="headerlink" title="nodejs批量修改图片名称"></a>nodejs批量修改图片名称</h3><blockquote>
<p>有时候UI给我们的图片是自己并不想要的名称，这个时候批量修改图片的作用就显示出来了</p>
</blockquote>
<a id="more"></a>
<p>首先看下文件目录结构<br>+img(files)<br>+changeName.js   </p>
<p>我们要将img文件夹中的图片改成abc1，abc2,…之类名字的图片  </p>
<p>然后我们看看changeName.js的内容吧   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 引入fs文件处理模块</div><div class="line">var fs = require(&quot;fs&quot;);</div><div class="line">var path = &apos;img&apos;</div><div class="line">fs.readdir(path, function(err, files) &#123;</div><div class="line"></div><div class="line">    // files是名称数组</div><div class="line">    files.forEach(function(filename,index) &#123;</div><div class="line">        //修改图片名称，当然如果只是改名字中一部分也是可以的，用字符串的拼接就好  </div><div class="line">        var oldPath = path + &apos;/&apos; + filename,</div><div class="line">        newPath = path + &apos;/&apos; + &apos;module&apos; + index;</div><div class="line">        //newPath = path + &apos;/&apos; + filename.replace(/aa/g,&apos;bb&apos;);</div><div class="line">        fs.rename(oldPath, newPath, function(err) &#123;</div><div class="line">            if (!err) &#123;</div><div class="line">                console.log(filename + &apos;替换成功!&apos;)</div><div class="line">            &#125; </div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>然后在changName.js的目录下面用命令行运行下<code>node changeName.js</code> 就可以了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;nodejs批量修改图片名称&quot;&gt;&lt;a href=&quot;#nodejs批量修改图片名称&quot; class=&quot;headerlink&quot; title=&quot;nodejs批量修改图片名称&quot;&gt;&lt;/a&gt;nodejs批量修改图片名称&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;有时候UI给我们的图片是自己并不想要的名称，这个时候批量修改图片的作用就显示出来了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="nodejs 批量修改图片名称" scheme="https://guimeisang.github.io/tags/nodejs-%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E5%9B%BE%E7%89%87%E5%90%8D%E7%A7%B0/"/>
    
  </entry>
  
  <entry>
    <title>周末生活系列之一</title>
    <link href="https://guimeisang.github.io/2017/01/08/%E5%91%A8%E6%9C%AB%E7%94%9F%E6%B4%BB%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80/"/>
    <id>https://guimeisang.github.io/2017/01/08/周末生活系列之一/</id>
    <published>2017-01-08T10:16:33.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="突然有段时间你会很想学做菜"><a href="#突然有段时间你会很想学做菜" class="headerlink" title="突然有段时间你会很想学做菜"></a>突然有段时间你会很想学做菜</h3><blockquote>
<p>最近桂梅桑开始痴迷做饭，希望在过年的时候再去看看有什么新的做法，get这些技能。以后就可以自己想吃就可以自己做了</p>
</blockquote>
<a id="more"></a>
<ul>
<li>辣椒酱油虾<br>材料： 辣椒（可以根据想吃的辣度，我一般喜欢比较辣的），蒜头，大蒜叶，老姜，8两虾米（两三人的量），酱油，鱼鼓油（李锦记的），鸡精。　 </li>
</ul>
<p>步骤：  </p>
<ol>
<li>先将虾用滚热的水过一次，虾米变红为止（里面必须切大片的姜去腥）  </li>
<li>将辣椒，蒜头，老姜，蒜叶先切好  </li>
<li>放油，先将辣椒，蒜头，老姜等比较硬的作料炒出香味。  </li>
<li>放虾（此间只要是或有点大，有烧焦的迹象，就放入点酱油，鱼鼓油，放盐巴，鸡精等。）</li>
<li>在出锅的时候，放入大蒜叶。  </li>
<li>然后放点酱油和醋做蘸料就可以开吃啦  </li>
</ol>
<ul>
<li>家常油豆腐<br>材料：辣椒（建议辣点），蒜头，蒜叶，等  </li>
</ul>
<p>步骤：</p>
<ol>
<li>放入大蒜，辣椒爆炒（火小点）　　</li>
<li>将油豆腐用水洗一下，然后对半切　　</li>
<li>放入油豆腐炒下，放入酱油，鸡精等  </li>
<li>放水，盐巴，煮一下。</li>
<li>出锅时，放入蒜叶翻炒即可</li>
</ol>
<p>生活用美味点缀，很美妙…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;突然有段时间你会很想学做菜&quot;&gt;&lt;a href=&quot;#突然有段时间你会很想学做菜&quot; class=&quot;headerlink&quot; title=&quot;突然有段时间你会很想学做菜&quot;&gt;&lt;/a&gt;突然有段时间你会很想学做菜&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;最近桂梅桑开始痴迷做饭，希望在过年的时候再去看看有什么新的做法，get这些技能。以后就可以自己想吃就可以自己做了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="周末生活系列" scheme="https://guimeisang.github.io/tags/%E5%91%A8%E6%9C%AB%E7%94%9F%E6%B4%BB%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>给ueditor添加dialog</title>
    <link href="https://guimeisang.github.io/2017/01/02/%E7%BB%99ueditor%E6%B7%BB%E5%8A%A0dialog/"/>
    <id>https://guimeisang.github.io/2017/01/02/给ueditor添加dialog/</id>
    <published>2017-01-02T02:02:04.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以添加”guimeisang”按钮为例说明，下面详细讲怎么给UEditor添加自定义弹窗。<br>各位看官看完记得自己写个demo看看咯…</p>
</blockquote>
<a id="more"></a>
<h3 id="先大概说下UEditor的文件目录"><a href="#先大概说下UEditor的文件目录" class="headerlink" title="先大概说下UEditor的文件目录"></a>先大概说下UEditor的文件目录</h3><ul>
<li>dialogs: 弹出对话框对应的资源和JS文件  </li>
<li>lang: 编辑器国际化显示的文件  </li>
<li>themes: 样式图片和样式文件  </li>
<li>third-party: 第三方插件(包括代码高亮，源码编辑等组件）  </li>
<li>ueditor.all.js: 开发版代码合并的结果,目录下所有文件的打包文件  </li>
<li>ueditor.all.min.js: ueditor.all.js文件的压缩版，建议在正式部署时采用  </li>
<li>ueditor.config.js: 编辑器的配置文件，建议和编辑器实例化页面置于同一目录  </li>
<li>ueditor.parse.js: 编辑的内容显示页面引用，会自动加载表格、列表、代码高亮等样式  </li>
<li>ueditor.parse.min.js: ueditor.parse.js文件的压缩版，建议在内容展示页正式部署时采用</li>
</ul>
<h3 id="修改ueditor-config-js文件"><a href="#修改ueditor-config-js文件" class="headerlink" title="修改ueditor.config.js文件"></a>修改ueditor.config.js文件</h3><p>在ueditor.config.js文件中，找到toolbars参数，增加一个“guimeisang”字符串，对应着添加一个labelMap，用于鼠标移上按钮时的提示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//工具栏上的所有的功能按钮和下拉框，可以在new编辑器的实例时选择自己需要的从新定义</div><div class="line">, toolbars: [[</div><div class="line">    &apos;fullscreen&apos;, &apos;source&apos;, &apos;|&apos;, &apos;undo&apos;, &apos;redo&apos;, &apos;|&apos;,</div><div class="line">    &apos;bold&apos;, &apos;italic&apos;, &apos;underline&apos;, &apos;fontborder&apos;, &apos;strikethrough&apos;, &apos;superscript&apos;, &apos;subscript&apos;, &apos;removeformat&apos;, &apos;formatmatch&apos;, &apos;autotypeset&apos;, &apos;blockquote&apos;, &apos;pasteplain&apos;, &apos;|&apos;, &apos;forecolor&apos;, &apos;backcolor&apos;, &apos;insertorderedlist&apos;, &apos;insertunorderedlist&apos;, &apos;selectall&apos;, &apos;cleardoc&apos;, &apos;|&apos;,</div><div class="line">    &apos;rowspacingtop&apos;, &apos;rowspacingbottom&apos;, &apos;lineheight&apos;, &apos;|&apos;,</div><div class="line">    &apos;customstyle&apos;, &apos;paragraph&apos;, &apos;fontfamily&apos;, &apos;fontsize&apos;, &apos;|&apos;,</div><div class="line">    &apos;directionalityltr&apos;, &apos;directionalityrtl&apos;, &apos;indent&apos;, &apos;|&apos;,</div><div class="line">    &apos;justifyleft&apos;, &apos;justifycenter&apos;, &apos;justifyright&apos;, &apos;justifyjustify&apos;, &apos;|&apos;, &apos;touppercase&apos;, &apos;tolowercase&apos;, &apos;|&apos;,</div><div class="line">    &apos;link&apos;, &apos;unlink&apos;, &apos;anchor&apos;, &apos;|&apos;, &apos;imagenone&apos;, &apos;imageleft&apos;, &apos;imageright&apos;, &apos;imagecenter&apos;, &apos;|&apos;,</div><div class="line">    &apos;simpleupload&apos;, &apos;insertimage&apos;, &apos;emotion&apos;, &apos;scrawl&apos;, &apos;insertvideo&apos;, &apos;music&apos;,&apos;audio&apos;, &apos;attachment&apos;, &apos;map&apos;, &apos;gmap&apos;, &apos;insertframe&apos;, &apos;insertcode&apos;, &apos;webapp&apos;, &apos;pagebreak&apos;, &apos;template&apos;, &apos;background&apos;, &apos;|&apos;,</div><div class="line">    &apos;horizontal&apos;, &apos;date&apos;, &apos;time&apos;, &apos;spechars&apos;, &apos;snapscreen&apos;, &apos;wordimage&apos;, &apos;|&apos;,</div><div class="line">    &apos;inserttable&apos;, &apos;deletetable&apos;, &apos;insertparagraphbeforetable&apos;, &apos;insertrow&apos;, &apos;deleterow&apos;, &apos;insertcol&apos;, &apos;deletecol&apos;, &apos;mergecells&apos;, &apos;mergeright&apos;, &apos;mergedown&apos;, &apos;splittocells&apos;, &apos;splittorows&apos;, &apos;splittocols&apos;, &apos;charts&apos;, &apos;|&apos;,</div><div class="line">    &apos;print&apos;, &apos;preview&apos;, &apos;searchreplace&apos;, &apos;help&apos;, &apos;drafts&apos;,&apos;guimeisang&apos;</div><div class="line">]]</div><div class="line">//当鼠标放在工具栏上时显示的tooltip提示,留空支持自动多语言配置，否则以配置值为准</div><div class="line">,labelMap:&#123;</div><div class="line">    guimeisang:&apos;桂梅桑&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="修改ueditor-all-js文件"><a href="#修改ueditor-all-js文件" class="headerlink" title="修改ueditor.all.js文件"></a>修改ueditor.all.js文件</h3><p>找到iframeUrlMap增加一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;audio&apos;: &apos;~/dialogs/guimeisang/guimeisang.html&apos;,</div></pre></td></tr></table></figure></p>
<p>找到btnCmds、dialogBtns增加一个元素：guimeisang   </p>
<p>接下来在dialogs文件夹下创建guimeisang文件夹并新建guimeisang.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;../internal.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;style type=&quot;text/css&quot;&gt;</div><div class="line">        *&#123;margin:0;padding:0;color: #838383;&#125;</div><div class="line">        table&#123;font-size: 12px;margin: 10px;line-height: 30px&#125;</div><div class="line">        .txt&#123;width:300px;height:21px;line-height:21px;border:1px solid #d7d7d7;&#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">    &lt;table&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td&gt;&lt;label for=&quot;href&quot;&gt;桂梅桑blog&lt;/label&gt;&lt;/td&gt;</div><div class="line">            &lt;td&gt;&lt;input class=&quot;txt&quot; id=&quot;href&quot; type=&quot;text&quot; /&gt;&lt;/td&gt;</div><div class="line">        &lt;/tr&gt;    </div><div class="line">    &lt;/table&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    function handleDialogOk() &#123;</div><div class="line">        if ($G(&apos;href&apos;).value) &#123;</div><div class="line">            var patt1 = /blog/gi;</div><div class="line"></div><div class="line">            if (patt1.test($G(&apos;href&apos;).value)) &#123;</div><div class="line">                editor.execCommand(&apos;insertHtml&apos;,&apos;博客&apos;) ;</div><div class="line">                dialog.close();</div><div class="line">            &#125; else &#123;</div><div class="line">                alert(&quot;这不是滴！！！&quot;);</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; else &#123;</div><div class="line">            alert(&quot;啥都没有&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dialog.onok = handleDialogOk;</div><div class="line">    $G(&apos;href&apos;).onkeydown = function(evt) &#123;</div><div class="line">        evt = evt || window.event;</div><div class="line">        if (evt.keyCode == 13) &#123;</div><div class="line">            handleDialogOk();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>相关的操作js也写在该html里面。<br>到这里，运行编辑器 新加的按钮已经出来啦，但是点击弹出的窗口样式不对 乱了；<br>这时候，修改themes/default/css/ueditor.css文件，增加一条样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.edui-default  .edui-for-audio .edui-icon &#123;</div><div class="line">    background-position: -18px -40px</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，弹窗可以正常显示了，并能插入相应的代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以添加”guimeisang”按钮为例说明，下面详细讲怎么给UEditor添加自定义弹窗。&lt;br&gt;各位看官看完记得自己写个demo看看咯…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ueditor" scheme="https://guimeisang.github.io/tags/ueditor/"/>
    
      <category term="dialog" scheme="https://guimeisang.github.io/tags/dialog/"/>
    
  </entry>
  
  <entry>
    <title>决定</title>
    <link href="https://guimeisang.github.io/2017/01/02/%E5%86%B3%E5%AE%9A/"/>
    <id>https://guimeisang.github.io/2017/01/02/决定/</id>
    <published>2017-01-02T02:01:30.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最重要的决定<br>时间过得好快…<br><a id="more"></a><br>回想谁若过得好，必然是每一个重要的决定都做得很好…<br>中考，高考，买房，结婚，升职，创业等等…<br>这些决定都无不深刻的影响着每一个人的生活…<br>不可忽视这些决定…<br>为做这些决定后面的思考琢磨…为达到这些决定所需要付出的努力…<br>都那么艰难，一个个重要的决定！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=416385621&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最重要的决定&lt;br&gt;时间过得好快…&lt;br&gt;
    
    </summary>
    
    
      <category term="2017自白" scheme="https://guimeisang.github.io/tags/2017%E8%87%AA%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>拒绝</title>
    <link href="https://guimeisang.github.io/2017/01/02/%E6%8B%92%E7%BB%9D/"/>
    <id>https://guimeisang.github.io/2017/01/02/拒绝/</id>
    <published>2017-01-02T02:01:07.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年，自己想要的一年<br><a id="more"></a><br>也许上半年，平静和孤独<br>下半年，开始的充实，踏实<br>直到她走入我的生活<br>难题再次出现，时间和精力…<br>我想回归，不是她的错，是我没有安排好，是我没控制住…<br>也许下次最需要考虑的事情，就是“拒绝”<br>拒绝不必要的时间浪费，不必要的精力…<br>拒绝贪念…<br>那便是成熟…</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=186693&auto=0&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年，自己想要的一年&lt;br&gt;
    
    </summary>
    
    
      <category term="2017自白" scheme="https://guimeisang.github.io/tags/2017%E8%87%AA%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>reviewAndPlan</title>
    <link href="https://guimeisang.github.io/2017/01/02/reviewAndPlan/"/>
    <id>https://guimeisang.github.io/2017/01/02/reviewAndPlan/</id>
    <published>2017-01-02T02:00:38.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>生活不易，需要多思索才能有收获</p>
</blockquote>
<a id="more"></a>
<h3 id="2016年"><a href="#2016年" class="headerlink" title="2016年"></a>2016年</h3><p>去年哪些事情是在浪费自己的时间和精力<br>去年哪些还是可以提高效率<br>去年哪些决定做错了<br>去年哪些….  </p>
<h3 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h3><ol>
<li>如何实现我进入BAT甚至谷歌、Facebook 、微软的愿景，哪怕是往这个方向再走一步也不错</li>
<li>开始学着拒绝…拒绝浪费自己时间的事情，浪费自己精力的事情</li>
<li>进一步提高自己的效率（工作效率和学习效率）</li>
<li>如何保持信息交流，比我小2岁的人在憧憬什么，比我大两岁的人在担忧什么</li>
<li>重要的决定一定要多琢磨，多思考，早准备；重要的决定一定要多花心思，多花力气完成</li>
<li>如何把计划落地（这是一个费精力和费脑子的活）</li>
</ol>
<h3 id="自白"><a href="#自白" class="headerlink" title="自白"></a>自白</h3><p>心态一定要坚定，好习惯才不会那么容易丢失，坏习惯才不会那么容易；<br>生活好难，一直都这么难吗？是的，一直都是这么操蛋的难…<br>从未有轻松的生活，从未有容易的学习，从未有那么容易的恋爱….<br>这都是去年大半年在想的问题…<strong>孤独和平静</strong>  </p>
<p>而今年…<strong>拒绝和正确</strong><br>大家时间都是那么多，效率那么的重要…<br>大家精力都那么多，拒绝那么重要…<br>2017，大家都那么长，都那么短。做正确决定那么重要…<br>我好忐忑，我很担心。但我应该不怕，至少我都思考过…<br>一直正确是那么的可贵，好想找到一个这样的人，成熟的思考体系，清晰的逻辑思维，准确的社会见识…<br>好久没遇到这种人，好想再次遇到，期待遇见你<br>当然我也想成为这样的人…可是没那么容易  </p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=444267928&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;生活不易，需要多思索才能有收获&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="2017自白" scheme="https://guimeisang.github.io/tags/2017%E8%87%AA%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>how to use a new plugin</title>
    <link href="https://guimeisang.github.io/2016/12/23/how-to-use-a-new-plugin/"/>
    <id>https://guimeisang.github.io/2016/12/23/how-to-use-a-new-plugin/</id>
    <published>2016-12-23T02:38:12.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>近期在做公式编辑器，当mathml语言和latex语言之间的转换，渲染方案的选择，还有wiris未知的<br>api,这些都让我这周好疲惫。总在想直接大改，但是许多未知的小问题做起来都十分的困难，很是头疼。<br>都说想做自己的一套公式编辑器，但是真的谈何容易，简单来说，如何将mathml的插入，如何将mathml渲染出来<br>等等，这任何一个都复杂。其实也不是很难，但是需要不断的调试；上午有点心累，想休息下，也来总结下吧  </p>
</blockquote>
<a id="more"></a>
<h3 id="未知插件的使用"><a href="#未知插件的使用" class="headerlink" title="未知插件的使用"></a>未知插件的使用</h3><p>背景： 有些插件没有将api开放出来，并且给你的代码可能是压缩后的<br>注意点：   </p>
<ol>
<li>每一个插件都会实例化一个对象，插件里面都会将一个api捆绑在这个对象上面，所以当实例化之后，打断点，在这个对象里面去找api是最高效的；    </li>
<li>如果工作只是用用api就好了，难度在于需要改造这个插件；    </li>
<li>自己构思，如果你来写这个插件，你会怎么来做。     </li>
<li>比如改造，首先得看得懂，所以以后要提醒自己写代码的时候，也得带着这种思维去写代码；这样才能提升自己  </li>
<li>总之学会调试，合理的猜想，通过实际来验证，排除法…这些知识都需要实践来转变为智慧啊。  </li>
</ol>
<p>总之：　多调试，通过改造提升自己代码能力和思维深化</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近期在做公式编辑器，当mathml语言和latex语言之间的转换，渲染方案的选择，还有wiris未知的&lt;br&gt;api,这些都让我这周好疲惫。总在想直接大改，但是许多未知的小问题做起来都十分的困难，很是头疼。&lt;br&gt;都说想做自己的一套公式编辑器，但是真的谈何容易，简单来说，如何将mathml的插入，如何将mathml渲染出来&lt;br&gt;等等，这任何一个都复杂。其实也不是很难，但是需要不断的调试；上午有点心累，想休息下，也来总结下吧  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="editor" scheme="https://guimeisang.github.io/tags/editor/"/>
    
  </entry>
  
  <entry>
    <title>周日学做菜</title>
    <link href="https://guimeisang.github.io/2016/12/18/%E5%91%A8%E6%97%A5%E5%AD%A6%E5%81%9A%E8%8F%9C/"/>
    <id>https://guimeisang.github.io/2016/12/18/周日学做菜/</id>
    <published>2016-12-18T15:51:26.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>三个菜.jpg</p>
<p>周末表妹过来<br>她依旧如此美丽，却多了些贤惠和能干  </p>
<p>鸡爪和萍乡小炒肉她炒的<br>说是来尝我的菜，结果我就做了一个白菜<br>很是不太好意思  </p>
<p>脑子里现在过一下从选材到切菜，配料，下锅<br>萍乡小炒肉，肉切薄点，先用酱油盐卤一下，大蒜切细，葱，蒜叶，干辣椒，生抽<br>鸡爪，先水过一下，筷子可戳动，去掉爪子，切两半 ，炒大蒜和蒜根，放入鸡爪，酱油，干辣椒，生抽    </p>
<p>实践才能将知识理论转化为智慧<br>我想做一个有智慧的人<br>你会来试菜吗？  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三个菜.jpg&lt;/p&gt;
&lt;p&gt;周末表妹过来&lt;br&gt;她依旧如此美丽，却多了些贤惠和能干  &lt;/p&gt;
&lt;p&gt;鸡爪和萍乡小炒肉她炒的&lt;br&gt;说是来尝我的菜，结果我就做了一个白菜&lt;br&gt;很是不太好意思  &lt;/p&gt;
&lt;p&gt;脑子里现在过一下从选材到切菜，配料，下锅&lt;br&gt;萍乡小炒肉，肉
    
    </summary>
    
    
      <category term="生活" scheme="https://guimeisang.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>一种需要返回ID的下拉框插件</title>
    <link href="https://guimeisang.github.io/2016/12/16/%E4%B8%80%E7%A7%8D%E9%9C%80%E8%A6%81%E8%BF%94%E5%9B%9EID%E7%9A%84%E4%B8%8B%E6%8B%89%E6%A1%86%E6%8F%92%E4%BB%B6/"/>
    <id>https://guimeisang.github.io/2016/12/16/一种需要返回ID的下拉框插件/</id>
    <published>2016-12-16T03:59:50.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先看效果"><a href="#先看效果" class="headerlink" title="先看效果"></a>先看效果</h3><p><img src="http://oi9n0t0p1.bkt.clouddn.com/dropdown.png" alt="image"></p>
<a id="more"></a>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;label class=&quot;self_label_class common_label_class&quot;&gt;&lt;/label&gt;</div><div class="line">&lt;ul class=&quot;self_ul_class common_ul_class&quot; style=&quot;display:none;&quot;&gt;&lt;/ul&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script src=&quot;./custom/component/component.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;./custom/component/dropDown.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;./custom/component/demo.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.common_label_class&#123;display:inline-block;width:270px;line-height:42px;height:42px;overflow:hidden;font-size:14px;color:#5a5a5a;border:1px solid #e3e3ed;padding:0px 24px 0px 14px;margin-right:8px;background: url(&quot;.&quot;) 278px center no-repeat;&#125;</div><div class="line">.common_label_class:hover&#123;background: url(&quot;.&quot;) 278px center no-repeat;border:1px solid #98bd31;&#125;</div><div class="line">.common_label_class.active&#123;background: url(&quot;.&quot;) 278px center no-repeat !important;border:1px solid #98bd31 !important;&#125;</div><div class="line">.common_ul_class&#123;position: absolute;width:310px;left:-32px;margin-top:-3px;background:#fff;max-height:297px;overflow-y: auto;&#125;</div><div class="line">.common_ul_class li&#123;font-size:12px;color:#666;padding:0px 14px;line-height:32px;border-bottom:1px solid #cdcdd1;border-left:1px solid #cdcdd1;border-right:1px solid #cdcdd1;background:#fff;cursor: pointer;&#125;</div><div class="line">.common_ul_class li:hover&#123;background:#f0f0f6;&#125;</div></pre></td></tr></table></figure>
<h3 id="demo-js"><a href="#demo-js" class="headerlink" title="demo.js"></a>demo.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var typeId = null;//这是点击之后返回的值</div><div class="line">var options = &#123;</div><div class="line">    self_label_class:&apos;self_label_class&apos;,</div><div class="line">    self_ul_class:&apos;self_ul_class&apos;,</div><div class="line">    common_label_class:&apos;common_label_class&apos;,</div><div class="line">    common_ul_class:&apos;common_ul_class&apos;,</div><div class="line">    defaultTxt:&quot;这里写选择框里的内容&quot;,</div><div class="line">    id:&quot;code&quot;,</div><div class="line">    name:&quot;codeValue&quot;,</div><div class="line">    list_data:[ &#123;</div><div class="line">        &quot;code&quot; : 1,</div><div class="line">        &quot;codeValue&quot; : &quot;易错题&quot;</div><div class="line">        &#125;,&#123;</div><div class="line">        &quot;code&quot; : 2,</div><div class="line">        &quot;codeValue&quot; : &quot;典型题&quot;</div><div class="line">        &#125;, &#123;</div><div class="line">        &quot;code&quot; : 3,</div><div class="line">        &quot;codeValue&quot; : &quot;其他&quot;</div><div class="line">    &#125;],</div><div class="line">    callback:function(currentLiId)&#123;</div><div class="line">        typeId = currentLiId;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">custComponent.dropDown.init(options);</div></pre></td></tr></table></figure>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">// dropDown.js</div><div class="line">(function(CustomComponent)&#123;</div><div class="line">    var newLi,_ul,currentLi,currentLiId;</div><div class="line"></div><div class="line">    //初始化组件dom</div><div class="line">    function _init(options)&#123;</div><div class="line">        var name = options.name,</div><div class="line">            id = options.id,</div><div class="line">            list_data = options.list_data,</div><div class="line">            callback = options.callback,</div><div class="line">            defaultTxt = options.defaultTxt,</div><div class="line">            self_label_class = options.self_label_class,</div><div class="line">            self_ul_class = options.self_ul_class,</div><div class="line">            common_label_class = options.common_label_class,</div><div class="line">            common_ul_class = options.common_ul_class,</div><div class="line">            node_label = document.getElementsByClassName(self_label_class)[0],</div><div class="line">            node_ul = document.getElementsByClassName(self_ul_class)[0],</div><div class="line">            all_node_label = document.getElementsByClassName(common_label_class),</div><div class="line">            all_node_ul = document.getElementsByClassName(common_ul_class);</div><div class="line">        node_label.innerHTML = defaultTxt;</div><div class="line">        for(var i=0;i&lt;list_data.length;i++)&#123;</div><div class="line">            newLi = document.createElement(&apos;li&apos;);</div><div class="line">            newLi.innerHTML = list_data[i][name];</div><div class="line">            newLi.setAttribute(&quot;objId&quot;,list_data[i][id]);</div><div class="line">            newLi.setAttribute(&quot;class&quot;,&quot;dropDown-content-li&quot;);</div><div class="line">            node_ul.appendChild(newLi);</div><div class="line">        &#125;</div><div class="line">        _UlBingClick(node_label,node_ul);</div><div class="line">        _LiBingClick(node_label,node_ul,options,callback);</div><div class="line">        _closeAllDropDown(all_node_label,all_node_ul);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //点击label显示ul</div><div class="line">    function _UlBingClick(node_label,node_ul)&#123;</div><div class="line">        node_label.onclick = function(event)&#123;</div><div class="line">            if(node_ul.style.display==&quot;block&quot;)&#123;</div><div class="line">                node_ul.style.display=&quot;none&quot;;</div><div class="line">            &#125;else&#123;</div><div class="line">                node_ul.style.display=&quot;block&quot;;</div><div class="line">            &#125;</div><div class="line">            if(event&amp;&amp;event.stopPropagation)&#123;</div><div class="line">                event.stopPropagation();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //点击li并且传值过去</div><div class="line">    function _LiBingClick(node_label,node_ul,options,callback)&#123;</div><div class="line">        node_ul.onclick = function(event)&#123;</div><div class="line">            currentLi = event.target;</div><div class="line">            if(currentLi.className == &quot;dropDown-content-li&quot;)&#123;</div><div class="line">                _currentLiId = currentLi.getAttribute(&apos;objId&apos;);</div><div class="line">                node_label.innerHTML = currentLi.innerHTML;</div><div class="line">                if(node_label.innerHTML!= options.defaultTxt)&#123;</div><div class="line">                    var _className = options.self_label_class +&quot; &quot; + options.common_label_class+&quot; &quot; + &quot;active&quot;;</div><div class="line">                    node_label.setAttribute(&apos;class&apos;,_className);</div><div class="line">                &#125;else&#123;</div><div class="line">                    var _className = options.self_label_class +&quot; &quot; + options.common_label_class;</div><div class="line">                    node_label.setAttribute(&apos;class&apos;,_className);</div><div class="line">                &#125;</div><div class="line">                node_ul.style.display=&quot;none&quot;;</div><div class="line">                callback(_currentLiId);</div><div class="line">                if(event&amp;&amp;event.stopPropagation)&#123;</div><div class="line">                    event.stopPropagation();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //如果不是点击在ul或者label上则隐藏掉</div><div class="line">    function _closeAllDropDown(all_node_label,all_node_ul)&#123;</div><div class="line">        document.onclick = function(event)&#123;</div><div class="line">            for(var i = 0 ; i &lt; all_node_label.length ;i++)&#123;</div><div class="line">                if(event.target==all_node_ul[i]||event.target!=all_node_label[i])&#123;</div><div class="line">                    all_node_ul[i].style.display=&quot;none&quot;;</div><div class="line">                &#125;else&#123;</div><div class="line">                    all_node_ul[i].style.display=&quot;block&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //开放出去</div><div class="line">    CustomComponent.prototype.dropDown=&#123;</div><div class="line">        init:_init</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;)(CustomComponent)</div><div class="line"></div><div class="line">//component.js</div><div class="line">function Customponent()&#123;&#125;</div><div class="line">var  custComponent=new Customponent();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先看效果&quot;&gt;&lt;a href=&quot;#先看效果&quot; class=&quot;headerlink&quot; title=&quot;先看效果&quot;&gt;&lt;/a&gt;先看效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://oi9n0t0p1.bkt.clouddn.com/dropdown.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="component" scheme="https://guimeisang.github.io/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>常用的git入门命令行</title>
    <link href="https://guimeisang.github.io/2016/12/16/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%85%A5%E9%97%A8%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>https://guimeisang.github.io/2016/12/16/常用的git入门命令行/</id>
    <published>2016-12-16T01:57:16.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git远程操作详细"><a href="#Git远程操作详细" class="headerlink" title="Git远程操作详细"></a>Git远程操作详细</h1><p>详细如下：<br><strong>本文详细介绍了5个基本的git命令</strong></p>
<ul>
<li>git clone</li>
<li>git remote</li>
<li>git fetch</li>
<li>git pull</li>
<li>git push</li>
</ul>
<p><strong>本文只是针对git初级用户，这不包括完全小白，如果是完全明白，基本上是可以覆盖所有的普通的操作！</strong></p>
<a id="more"></a>
<p><img src="https://github.com/guimeisang/git/blob/master/img/git%E5%85%A5%E9%97%A8%E5%9F%BA%E6%9C%AC%E5%9B%BE.jpg" alt="image"></p>
<h2 id="一、git-clone"><a href="#一、git-clone" class="headerlink" title="一、git clone"></a>一、git clone</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone &lt;版本库的网址&gt;</div></pre></td></tr></table></figure>
<p>比如：克隆jQuery的版本库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/jquery/jquery.git</div></pre></td></tr></table></figure>
<p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git clone http[s]://example.com/path/to/repo.git/</div><div class="line">$ git clone ssh://example.com/path/to/repo.git/</div><div class="line">$ git clone git://example.com/path/to/repo.git/</div><div class="line">$ git clone /opt/git/project.git</div><div class="line">$ git clone file:///opt/git/project.git</div><div class="line">$ git clone ftp[s]://example.com/path/to/repo.git/</div><div class="line">$ git clone rsync://example.com/path/to/repo.git/</div></pre></td></tr></table></figure>
<p><strong>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考<a href="http://git-scm.com/book/en/Git-on-the-Server-The-Protocols" target="_blank" rel="external">官方文档</a>。</strong></p>
<h2 id="二、git-remote"><a href="#二、git-remote" class="headerlink" title="二、git remote"></a>二、git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。<strong>git remote命令就用于管理主机名</strong>。<br>不带选项的时候，git remote命令列出所有远程主机。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
<p>使用-v选项，可以参看远程主机的网址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin  git@github.com:jquery/jquery.git (fetch)</div><div class="line">origin  git@github.com:jquery/jquery.git (push)</div></pre></td></tr></table></figure>
<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。<br>克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone -o jQuery https://github.com/jquery/jquery.git</div><div class="line">$ git remote</div><div class="line">jQuery</div></pre></td></tr></table></figure>
<p>git remote show命令加上主机名，可以查看该主机的详细信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote show &lt;主机名&gt;</div></pre></td></tr></table></figure>
<p>git remote add命令用于添加远程主机。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add &lt;主机名&gt; &lt;网址&gt;</div></pre></td></tr></table></figure>
<p>git remote rm命令用于删除远程主机。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rm &lt;主机名&gt;</div></pre></td></tr></table></figure>
<p>git remote rename命令用于远程主机的改名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</div></pre></td></tr></table></figure>
<h2 id="三、git-fetch"><a href="#三、git-fetch" class="headerlink" title="三、git fetch"></a>三、git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到==git fetch==命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch &lt;远程主机名&gt;</div></pre></td></tr></table></figure>
<p>上面命令将某个远程主机的更新，全部取回本地。<br>git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。<br>默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</div></pre></td></tr></table></figure>
<p>比如，取回origin主机的master分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin master</div></pre></td></tr></table></figure>
<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。<br>git branch命令的-r选项，可以用来查看远程分支，-a选项查看所有分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git branch -r</div><div class="line">origin/master</div><div class="line"></div><div class="line">$ git branch -a</div><div class="line">* master</div><div class="line">  remotes/origin/master</div></pre></td></tr></table></figure>
<p>上面命令表示，本地主机的当前分支是master，远程分支是origin/master。<br>取回远程主机的更新以后，可以在它的基础上，使用git checkout命令创建一个新的分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b newBrach origin/master</div></pre></td></tr></table></figure>
<p>上面命令表示，在origin/master的基础上，创建一个新分支。<br>此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git merge origin/master</div><div class="line"># 或者</div><div class="line">$ git rebase origin/master</div></pre></td></tr></table></figure>
<p>上面命令表示在当前分支上，合并origin/master。</p>
<h2 id="四、git-pull"><a href="#四、git-pull" class="headerlink" title="四、git pull"></a>四、git pull</h2><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</div></pre></td></tr></table></figure>
<h2 id="请自行都用一遍，力争理解到本地仓库和远程仓库，index，本地工作区的之间是怎么联系的。"><a href="#请自行都用一遍，力争理解到本地仓库和远程仓库，index，本地工作区的之间是怎么联系的。" class="headerlink" title="请自行都用一遍，力争理解到本地仓库和远程仓库，index，本地工作区的之间是怎么联系的。"></a>请自行都用一遍，力争理解到本地仓库和远程仓库，index，本地工作区的之间是怎么联系的。</h2><blockquote>
<p>这个主要是参考<a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="external">blog</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git远程操作详细&quot;&gt;&lt;a href=&quot;#Git远程操作详细&quot; class=&quot;headerlink&quot; title=&quot;Git远程操作详细&quot;&gt;&lt;/a&gt;Git远程操作详细&lt;/h1&gt;&lt;p&gt;详细如下：&lt;br&gt;&lt;strong&gt;本文详细介绍了5个基本的git命令&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git clone&lt;/li&gt;
&lt;li&gt;git remote&lt;/li&gt;
&lt;li&gt;git fetch&lt;/li&gt;
&lt;li&gt;git pull&lt;/li&gt;
&lt;li&gt;git push&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本文只是针对git初级用户，这不包括完全小白，如果是完全明白，基本上是可以覆盖所有的普通的操作！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git cli" scheme="https://guimeisang.github.io/tags/git-cli/"/>
    
  </entry>
  
  <entry>
    <title>正式开发中的版本管理</title>
    <link href="https://guimeisang.github.io/2016/12/16/%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://guimeisang.github.io/2016/12/16/正式开发中的版本管理/</id>
    <published>2016-12-16T01:56:48.000Z</published>
    <updated>2017-08-05T09:11:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h1><blockquote>
<p>在正式开发中，以下会就几个比较典型的情况进行详细指导</p>
</blockquote>
<p>详细如下：<br>版本的分支(branch)和合并（merge）是否方便。有代码的物理拷贝。但是git只生成一个指向当前版本的指针(header)；这个就是得git很方便<br>但是这个好处会带来一些不便之处：就是你不加注意的话，很有可能会留下一个枝节曼生/四处开放的版本库。到处都是分支的脉络。<br>下面有一种策略，它可以使得版本库演进保持简洁，主干清晰，各分支清晰各司其职，井井有条。</p>
<a id="more"></a>
<p>##　一、主分支Master<br>首先，代码库应该有一个，且有一个主分支。所有提供用户使用的正式版本，都在这个主分支上面发布。<br><img src="https://github.com/guimeisang/git/blob/master/img/bg1.png" alt="image"></p>
<p>Git主分支的名字，默认叫做Master，它是自动建立的。版本库初始化以后，默认就是在主干上面开发。</p>
<h2 id="二、开发分支dev"><a href="#二、开发分支dev" class="headerlink" title="二、开发分支dev"></a>二、开发分支dev</h2><p>主分支主要是用来分布重大版本，日常开发应该在另一条分支上面完成的。我们把开发叫做dev<br><img src="https://github.com/guimeisang/git/blob/master/img/bg2.png" alt="image"></p>
<p>这个分支可以用来生成代码的最新隔夜版本(nightly)。如果是想正式对外发布，就在Master分支上，把master分之合并到dev（此时dev已经提前几个commit了）</p>
<ul>
<li>Git创建dev分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b dev master</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后你就在dev上面，写你的代码，写完之后，git add &lt;你的文件&gt; → git commit -m “记录” → git push。开发完之后<br>将dev分支发布到Master分支的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 切换到Master分支</div><div class="line">git checkout master</div><div class="line"># 对Develop分支进行合并（--no-ff参数代表着:Git执行&quot;快进式合并&quot;（fast-farward merge），会直接将Master分支指向Develop分支）</div><div class="line">git merge --no-ff dev -m &quot;将master分支merge到dev上去&quot;</div></pre></td></tr></table></figure></p>
<p>在master分支上面merge完之后，还需要，对merge的文件进行 git commit和git push 命令！</p>
<p> <img src="https://github.com/guimeisang/git/blob/master/img/bg3.png" alt="image"></p>
<p> 使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。关于合并的更多解释，请参考Benjamin Sandofsky的<br> <a href="http://sandofsky.com/blog/git-workflow.html" target="_blank" rel="external">《Understanding the Git Workflow》</a></p>
<p>  <img src="https://github.com/guimeisang/git/blob/master/img/bg4.png" alt="image"></p>
<h2 id="三、临时性分支"><a href="#三、临时性分支" class="headerlink" title="三、临时性分支"></a>三、临时性分支</h2><p>前面讲到版本库的两条主要分支：Master和Develop。前者用于正式发布，后者用于日常开发。其实，常设分支只需要这两条就够了，不需要其他了。</p>
<p>但是，除了常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：</p>
<ul>
<li>功能（feature）分支</li>
<li>预发布（release）分支</li>
<li>修补bug（fixbug）分支<br><strong>这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。</strong></li>
</ul>
<h2 id="四、-功能分支"><a href="#四、-功能分支" class="headerlink" title="四、 功能分支"></a>四、 功能分支</h2><p>接下来，一个个来看这三种”临时性分支”。<br>第一种是功能分支，它是为了开发某种特定功能，从Develop分支上面分出来的。开发完成后，要再并入Develop。<br> <img src="https://github.com/guimeisang/git/blob/master/img/bg5.png" alt="image"></p>
<p>功能分支的名字，可以采用feature-*的形式命名。<br>创建一个功能分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b feature-x develop</div></pre></td></tr></table></figure></p>
<p>在feature-x分支上开发完成后()，将功能分支合并到develop分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge --no-ff feature-x</div></pre></td></tr></table></figure></p>
<p>merge之后再dev分支上，git commit 和git push 将最新的文件push上去。<br>删除feature分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d feature-x</div></pre></td></tr></table></figure></p>
<h2 id="预发布分支"><a href="#预发布分支" class="headerlink" title="预发布分支"></a>预发布分支</h2><p>第二种是预发布分支，它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。<br>预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。</p>
<p>创建一个预发布分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b release-1.2 develop</div></pre></td></tr></table></figure></p>
<p>确认没有问题后，合并到master分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge --no-ff release-1.2</div><div class="line"># 对合并生成的新节点，做一个标签</div><div class="line">git tag -a 1.2</div></pre></td></tr></table></figure></p>
<p>再合并到develop分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　git checkout develop</div><div class="line">　git merge --no-ff release-1.2</div></pre></td></tr></table></figure></p>
<p>记得在master和dev上面，将更新的文件commmit和push上去<br>最后，删除预发布分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d release-1.2</div></pre></td></tr></table></figure></p>
<p>##　六、修补bug分支<br>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。<br>修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。</p>
<p> <img src="https://github.com/guimeisang/git/blob/master/img/bg6.png" alt="image"></p>
<p> 创建一个修补bug分支：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b fixbug-0.1 master</div></pre></td></tr></table></figure></p>
<p> 修补结束后，合并到master分支：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout master</div><div class="line">git merge --no-ff fixbug-0.1</div><div class="line">git tag -a 0.1.1</div></pre></td></tr></table></figure></p>
<p> 再合并到develop分支：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge --no-ff fixbug-0.1</div></pre></td></tr></table></figure></p>
<p> 最后，删除”修补bug分支”：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d fixbug-0.1</div></pre></td></tr></table></figure></p>
<p> (完)</p>
<h2 id="七、重命名远程分支"><a href="#七、重命名远程分支" class="headerlink" title="七、重命名远程分支"></a>七、重命名远程分支</h2><p> 在开发中，我们需要管理好自己的分支。<br> 有一种场景就是本来在dev分支进行开发的，但是为了区别版本号，需要将dev改成v1.2.0版本<br> 解决的思路就是：先删除远程的分支，然后重命名本地分支，再重新提交一个远程分支。</p>
<ol>
<li>先查一下所以的分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git branch -av</div><div class="line">* dev                           c38c6b2 异步加载，缓存 commit</div><div class="line">  master                        b70dd0f 有问题的文件上传做个提示...</div><div class="line">  remotes/origin/HEAD           -&gt; origin/master</div><div class="line">  remotes/origin/dev            c38c6b2 异步加载，缓存 commit</div><div class="line">  remotes/origin/master         b70dd0f 有问题的文件上传做个提示...</div><div class="line">  remotes/origin/release-v1.1.0 b70dd0f 有问题的文件上传做个提示...</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git push --delete origin dev</div><div class="line">To https://xxx.com/xxx/xxx.git</div><div class="line"> - [deleted]         dev</div></pre></td></tr></table></figure>
</li>
<li><p>重命名本地分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -m devel dev-v1.2.0</div></pre></td></tr></table></figure>
</li>
<li><p>推送本地分支：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git push origin dev-v1.2.0</div><div class="line">Counting objects: 20, done.</div><div class="line">Delta compression using up to 4 threads.</div><div class="line">Compressing objects: 100% (13/13), done.</div><div class="line">Writing objects: 100% (20/20), 3.79 KiB | 0 bytes/s, done.</div><div class="line">Total 20 (delta 8), reused 19 (delta 7)</div><div class="line">remote:</div><div class="line">remote: Create merge request for dev-v1.2.0:</div><div class="line">remote:   https://xxx/merge_reque</div><div class="line">sts/new?merge_request%5Bsource_branch%5D=dev-v1.2.0</div><div class="line">remote:</div><div class="line">To https://xxx.git</div><div class="line"> * [new branch]      dev-v1.2.0 -&gt; dev-v1.2.0</div></pre></td></tr></table></figure>
</li>
<li><p>再查看下所有的branch情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">* dev-v1.2.0                    c38c6b2 异步加载，缓存 commit</div><div class="line">  master                        b70dd0f 有问题的文件上传做个提示...</div><div class="line">  remotes/origin/HEAD           -&gt; origin/master</div><div class="line">  remotes/origin/dev-v1.2.0     c38c6b2 异步加载，缓存 commit</div><div class="line">  remotes/origin/master         b70dd0f 有问题的文件上传做个提示...</div><div class="line">  remotes/origin/release-v1.1.0 b70dd0f 有问题的文件上传做个提示...</div></pre></td></tr></table></figure>
</li>
<li><p>在删除远程分支的时候，容易碰到的问题就是如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git push --delete origin devel</div><div class="line">remote: error: refusing to delete the current branch: refs/heads/devel</div><div class="line">To git@github.com:zrong/quick-cocos2d-x.git</div><div class="line"> ! [remote rejected] devel (deletion of the current branch prohibited)</div><div class="line">error: failed to push some refs to &apos;git@github.com:zrong/quick-cocos2d-x.git&apos;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这是由于在 github 中，devel 是项目的默认分支。要解决此问题，这样操作：</p>
<ul>
<li>进入 github 中该项目的 Settings 页面；</li>
<li>设置 Default Branch 为其他的分支（例如 master）；</li>
<li>重新执行删除远程分支命令。</li>
</ul>
<blockquote>
<p>该文主要参考<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">blog</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git分支管理&quot;&gt;&lt;a href=&quot;#Git分支管理&quot; class=&quot;headerlink&quot; title=&quot;Git分支管理&quot;&gt;&lt;/a&gt;Git分支管理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在正式开发中，以下会就几个比较典型的情况进行详细指导&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;详细如下：&lt;br&gt;版本的分支(branch)和合并（merge）是否方便。有代码的物理拷贝。但是git只生成一个指向当前版本的指针(header)；这个就是得git很方便&lt;br&gt;但是这个好处会带来一些不便之处：就是你不加注意的话，很有可能会留下一个枝节曼生/四处开放的版本库。到处都是分支的脉络。&lt;br&gt;下面有一种策略，它可以使得版本库演进保持简洁，主干清晰，各分支清晰各司其职，井井有条。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git cli" scheme="https://guimeisang.github.io/tags/git-cli/"/>
    
  </entry>
  
</feed>
